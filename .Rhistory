#     stop('colnames of input data do not match rownames of annotations, cannot link annotations to data')
#   }
#   temp.annotations <- temp.annotations[match(colnames(dat), rownames(temp.annotations)),, drop = FALSE]
# }
if (is.null(groupby.x) == TRUE & (color.by %in% colnames(params$annotations)) == FALSE) { groupby.x <- FALSE}  ##if groupby.x is null and color.by is in annot_samps, will group by that annotation as well, if no override to group and no annotation to color, wont group at all, if custom group vector supplied, will get corrected downstream
####if coloring by gene or custom color vector, identity based
if (color.by %in% rownames(data) | any(custom.color.vec != FALSE)) {   ##if coloring by gene or by custom
if (color.by %in% rownames(data)) {
genedat<- data[which(rownames(data)==color.by),]
if (is.raw.Ct ==FALSE) {colors <- myColorRamp5(params$expression_gradient.colors,genedat, percent.mad = percent.mad)}
if (is.raw.Ct ==TRUE) {colors <- myColorRamp5(rev(params$expression_gradient.colors),genedat, percent.mad = percent.mad)}
} else{ colors <- custom.color.vec}
coloring <- list(color.by = color.by, colors = colors)
##make dat.to.plot with identiy based colors
if (any(custom.group.vec != FALSE)) {
if (legend.position == "default") { legend.position <- "none"}
dat.to.plot <- data.frame(t(dat)) #; dat.to.plot <- cbind(dat.to.plot, temp.annotations)
dat.to.plot$colors <- colors; dat.to.plot$Custom <- custom.group.vec
#dat.to.plot <- reshape2::melt(dat.to.plot, id.vars = c(colnames(temp.annotations),"colors", "Custom"))
dat.to.plot <- reshape2::melt(dat.to.plot, id.vars = c("colors", "Custom"))
groupby.x <- "Custom"
if (any(squishy != FALSE)) { dat.to.plot$value <- scales::squish(dat.to.plot$value, squishy)}  ##if we want to squish
}else{
dat.to.plot <- data.frame(t(dat))#; dat.to.plot <- cbind(dat.to.plot, temp.annotations)
dat.to.plot$colors <- colors
dat.to.plot <- reshape2::melt(dat.to.plot, id.vars = c("colors"))
if (any(squishy != FALSE)) { dat.to.plot$value <- scales::squish(dat.to.plot$value, squishy)}   ##if we want to squish
}  ##set dat.to.plot with identity based color vector and identity based group vector if supplied
####
if ((is.null(groupby.x) == FALSE)) {  ##groupby has either been set to false by user or by previous tested condition (same as color, taken care of above)
if (groupby.x != FALSE) {  ##set group to specification
if (groupby.x %in% colnames(params$annotations)) {
####if data is not all samples, subset annotations appropriately
temp.annotations <- params$annotations
if (any(!is.na(temp.annotations))) {
if (any(colnames(dat) %notin% rownames(temp.annotations))) {
stop('colnames of input data do not match rownames of annotations, cannot link annotations to data')
}
temp.annotations <- temp.annotations[match(colnames(dat), rownames(temp.annotations)),, drop = FALSE]
}
dat.to.plot <- data.frame(t(dat)); dat.to.plot <- cbind(dat.to.plot, temp.annotations)
dat.to.plot$colors <- colors
dat.to.plot <- reshape2::melt(dat.to.plot, id.vars = c(colnames(temp.annotations),"colors"))
if (any(squishy != FALSE)) { dat.to.plot$value <- scales::squish(dat.to.plot$value, squishy)}   ##if we want to squish
}
if (facet.wrap == FALSE) {
p <- ggplot(dat.to.plot, aes(x=variable,y=value,fill=colors, group=eval(parse(text=groupby.x))))+ ggbeeswarm::geom_quasirandom(pch=21,color="black", dodge.width = dodge.width, size=point.size, alpha = transparency) +
scale_fill_identity() +
theme_bw() + theme(panel.grid = element_blank(), plot.title = element_text(hjust=0.5, size=40),
strip.text = element_text(size=25), strip.background.x = element_blank(), legend.position = legend.position,
axis.title.y = element_text(size=20), axis.title.x=element_blank(), axis.text.x = element_text(size=axis.text.x.size))
call <- 'ggplot(input_data, aes(x=variable,y=value,fill=colors, group=groupby.x))+ ggbeeswarm::geom_quasirandom(pch=21,color="black", dodge.width = dodge.width, size=point.size, alpha = transparency) +
scale_fill_identity() +
theme_bw() + theme(panel.grid = element_blank(), plot.title = element_text(hjust=0.5, size=40),
strip.text = element_text(size=25), strip.background.x = element_blank(), legend.position = legend.position,
axis.title.y = element_text(size=20), axis.title.x=element_blank(), axis.text.x = element_text(size=axis.text.x.size))'
if(is.raw.Ct==T){
p <- p + ylab("Raw Ct Value") + scale_y_reverse()
call <- paste(call, '+ ylab("Raw Ct Value") + scale_y_reverse()')
}else{
p <- p + ylab("Normalized Expression Level")
call <- paste(call, '+ ylab("Normalized Expression Level")')
}
}
if (facet.wrap == TRUE) {
p <- ggplot(dat.to.plot, aes(x=eval(parse(text=groupby.x)),y=value,fill=colors,group=eval(parse(text=groupby.x))))+ ggbeeswarm::geom_quasirandom(pch=21,color="black", dodge.width = 0.8, alpha = transparency) +
scale_fill_identity() +
theme_bw() + theme(panel.grid = element_blank(), plot.title = element_text(hjust=0.5, size=40),
strip.text = element_text(size=25), strip.background.x = element_blank(), legend.position = legend.position,
axis.title.y = element_text(size=20), axis.title.x=element_blank(), axis.text.x = element_text(size=axis.text.x.size))
call <- 'ggplot(input_data, aes(x=groupby.x,y=value,fill=colors,group=groupby.x))+ ggbeeswarm::geom_quasirandom(pch=21,color="black", dodge.width = 0.8, alpha = transparency) +
scale_fill_identity() +
theme_bw() + theme(panel.grid = element_blank(), plot.title = element_text(hjust=0.5, size=40),
strip.text = element_text(size=25), strip.background.x = element_blank(), legend.position = legend.position,
axis.title.y = element_text(size=20), axis.title.x=element_blank(), axis.text.x = element_text(size=axis.text.x.size))'
if(is.raw.Ct==T){
p <- p + ylab("Raw Ct Value") + scale_y_reverse() + facet_wrap(~variable, ncol=ncols, scales = scales)
call <- paste(call, '+ ylab("Raw Ct Value") + scale_y_reverse() + facet_wrap(~variable, ncol=ncols, scales = scales)')
}else{
p <- p + ylab("Normalized Expression Level") + facet_wrap(~variable, ncol=ncols, scales = scales)
call <- paste(call, '+ ylab("Normalized Expression Level") + facet_wrap(~variable, ncol=ncols, scales = scales)')
}
}
}else{ ##no groupings, and no facet
p <- ggplot(dat.to.plot, aes(x=variable,y=value,fill=colors))+ ggbeeswarm::geom_quasirandom(pch=21,color="black", size=point.size) +
scale_fill_identity() + #ggtitle(paste(list)) +
theme_bw() + theme(panel.grid = element_blank(), plot.title = element_text(hjust=0.5, size=40),
strip.text = element_text(size=25), strip.background.x = element_blank(), legend.position = legend.position,
axis.title.y = element_text(size=20), axis.title.x=element_blank(), axis.text.x = element_text(size=axis.text.x.size))
call <- 'ggplot(input_data, aes(x=variable,y=value,fill=colors))+ ggbeeswarm::geom_quasirandom(pch=21,color="black", size=point.size) +
scale_fill_identity() + #ggtitle(paste(list)) +
theme_bw() + theme(panel.grid = element_blank(), plot.title = element_text(hjust=0.5, size=40),
strip.text = element_text(size=25), strip.background.x = element_blank(), legend.position = legend.position,
axis.title.y = element_text(size=20), axis.title.x=element_blank(), axis.text.x = element_text(size=axis.text.x.size))'
if(is.raw.Ct==T){
p <- p + ylab("Raw Ct Value") + scale_y_reverse()
call <- paste(call,'+ ylab("Raw Ct Value") + scale_y_reverse()')
}else{
p <- p + ylab("Normalized Expression Level")
call <- paste(call, '+ ylab("Normalized Expression Level")')
}
}
}
}else{ ##custom color vector, by gene or supplied
####if color.by is by an annotation, not identity based colors
###set dat.to.plot
if (any(custom.group.vec != FALSE)) {
groupby.x <- "Custom"}
if (color.by %in% colnames(params$annotations)) {
####if data is not all samples, subset annotations appropriately
temp.annotations <- params$annotations
if (any(!is.na(temp.annotations))) {
if (any(colnames(dat) %notin% rownames(temp.annotations))) {
stop('colnames of input data do not match rownames of annotations, cannot link annotations to data')
}
temp.annotations <- temp.annotations[match(colnames(dat), rownames(temp.annotations)),, drop = FALSE]
}
dat.to.plot <- data.frame(t(dat)); dat.to.plot <- cbind(dat.to.plot, temp.annotations)
if (legend.position == "default") { legend.position <- "right"}
if (color.by %in% names(params$annot_cols)) {
colors <- params$annot_cols[[which(names(params$annot_cols) == color.by)]]
coloring <- list(color.by = color.by , colors = colors)
}else{
colors <- scales::hue_pal()(length(levels(as.factor(dat.to.plot[,which(colnames(dat.to.plot) == color.by)]))))
coloring <- list(color.by = color.by , colors = colors)
}
##group by same annotations as coloring
if ( (is.null(groupby.x) == TRUE) & (color.by %in% colnames(temp.annotations))) {
dat.to.plot <- reshape2::melt(dat.to.plot, id.vars = c(colnames(temp.annotations)))
if (any(squishy != FALSE)) { dat.to.plot$value <- scales::squish(dat.to.plot$value, squishy)}   ##if we want to squish
if (facet.wrap == FALSE) {
p <- ggplot(dat.to.plot, aes(x=variable,y=value,fill=eval(parse(text=color.by)), group=eval(parse(text=color.by))))+ ggbeeswarm::geom_quasirandom(pch=21,color="black", dodge.width = dodge.width, size=point.size, alpha = transparency) +
scale_fill_manual(values=colors) + labs(fill=color.by) +
theme_bw() + theme(panel.grid = element_blank(), plot.title = element_text(hjust=0.5, size=40),
strip.text = element_text(size=25), strip.background.x = element_blank(), legend.position = legend.position,
axis.title.y = element_text(size=20), axis.title.x=element_blank(), axis.text.x = element_text(size=axis.text.x.size))
call <- 'ggplot(input_data, aes(x=variable,y=value,fill=color.by, group=color.by))+ ggbeeswarm::geom_quasirandom(pch=21,color="black", dodge.width = dodge.width, size=point.size, alpha = transparency) +
scale_fill_manual(values=colors) + labs(fill=color.by) +
theme_bw() + theme(panel.grid = element_blank(), plot.title = element_text(hjust=0.5, size=40),
strip.text = element_text(size=25), strip.background.x = element_blank(), legend.position = legend.position,
axis.title.y = element_text(size=20), axis.title.x=element_blank(), axis.text.x = element_text(size=axis.text.x.size))'
if(is.raw.Ct==T){
p <- p + ylab("Raw Ct Value") + scale_y_reverse()
call <- paste(call, '+ ylab("Raw Ct Value") + scale_y_reverse()')
}else{
p <- p + ylab("Normalized Expression Level")
call <- paste(call, '+ ylab("Normalized Expression Level")')
}
}
if (facet.wrap == TRUE) {
p <- ggplot(dat.to.plot, aes(x=eval(parse(text=color.by)),y=value,fill=eval(parse(text=color.by))))+ ggbeeswarm::geom_quasirandom(pch=21,color="black", dodge.width = dodge.width, size=point.size, alpha = transparency) +
scale_fill_manual(values=colors) + labs(fill=color.by) +
theme_bw() + theme(panel.grid = element_blank(), plot.title = element_text(hjust=0.5, size=40),
strip.text = element_text(size=25), strip.background.x = element_blank(), legend.position = legend.position,
axis.title.y = element_text(size=20), axis.title.x=element_blank(), axis.text.x = element_text(size=axis.text.x.size))
call <- 'ggplot(input_data, aes(x=color.by,y=value,fill=color.by))+ ggbeeswarm::geom_quasirandom(pch=21,color="black", dodge.width = dodge.width, size=point.size, alpha = transparency) +
scale_fill_manual(values=colors) + labs(fill=color.by) +
theme_bw() + theme(panel.grid = element_blank(), plot.title = element_text(hjust=0.5, size=40),
strip.text = element_text(size=25), strip.background.x = element_blank(), legend.position = legend.position,
axis.title.y = element_text(size=20), axis.title.x=element_blank(), axis.text.x = element_text(size=axis.text.x.size))'
if(is.raw.Ct==T){
p <- p + ylab("Raw Ct Value") + scale_y_reverse() + facet_wrap(~variable, ncol=ncols, scales = scales)
call <- paste(call, '+ ylab("Raw Ct Value") + scale_y_reverse() + facet_wrap(~variable, ncol=ncols, scales = scales)')
}else{
p <- p + ylab("Normalized Expression Level") + facet_wrap(~variable, ncol=ncols, scales = scales)
call <- paste(call, '+ ylab("Normalized Expression Level") + facet_wrap(~variable, ncol=ncols, scales = scales)')
}
}
}
##group by something other than colors or override groups with color
if ((is.null(groupby.x) == FALSE)) {
if (groupby.x != FALSE) {  ##group by specified grouping
if (any(custom.group.vec != FALSE)) {
dat.to.plot$Custom <- custom.group.vec
dat.to.plot <- reshape2::melt(dat.to.plot, id.vars = c(colnames(temp.annotations),"Custom"))
}else{
dat.to.plot <- reshape2::melt(dat.to.plot, id.vars = c(colnames(temp.annotations)))
}
if (any(squishy != FALSE)) { dat.to.plot$value <- scales::squish(dat.to.plot$value, squishy)}   ##if we want to squish
if (facet.wrap == FALSE) {
p <- ggplot(dat.to.plot, aes(x=variable,y=value,fill=eval(parse(text=color.by)), group=eval(parse(text=groupby.x))))+ ggbeeswarm::geom_quasirandom(pch=21,color="black", dodge.width = dodge.width, size=point.size, alpha = transparency) +
scale_fill_manual(values=colors) + labs(fill=color.by) +
theme_bw() + theme(panel.grid = element_blank(), plot.title = element_text(hjust=0.5, size=40),
strip.text = element_text(size=25), strip.background.x = element_blank(), legend.position = legend.position,
axis.title.y = element_text(size=20), axis.title.x=element_blank(), axis.text.x = element_text(size=axis.text.x.size))
call <- 'ggplot(input_data, aes(x=variable,y=value,fill=color.by, group=groupby.x))+ ggbeeswarm::geom_quasirandom(pch=21,color="black", dodge.width = dodge.width, size=point.size, alpha = transparency) +
scale_fill_manual(values=colors) + labs(fill=color.by) +
theme_bw() + theme(panel.grid = element_blank(), plot.title = element_text(hjust=0.5, size=40),
strip.text = element_text(size=25), strip.background.x = element_blank(), legend.position = legend.position,
axis.title.y = element_text(size=20), axis.title.x=element_blank(), axis.text.x = element_text(size=axis.text.x.size))'
if(is.raw.Ct==T){
p <- p + ylab("Raw Ct Value") + scale_y_reverse()
call <- paste(call, '+ ylab("Raw Ct Value") + scale_y_reverse()')
}else{
p <- p + ylab("Normalized Expression Level")
call <- paste(call, '+ ylab("Normalized Expression Level")')
}
}
if (facet.wrap == TRUE) {
p <- ggplot(dat.to.plot, aes(x=eval(parse(text=groupby.x)),y=value,fill=eval(parse(text=color.by)),group=eval(parse(text=groupby.x))))+ ggbeeswarm::geom_quasirandom(pch=21,color="black", dodge.width = dodge.width, size=point.size, alpha = transparency) +
scale_fill_manual(values=colors) + labs(fill=color.by) +
theme_bw() + theme(panel.grid = element_blank(), plot.title = element_text(hjust=0.5, size=40),
strip.text = element_text(size=25), strip.background.x = element_blank(), legend.position = legend.position,
axis.title.y = element_text(size=20), axis.title.x=element_blank(), axis.text.x = element_text(size=axis.text.x.size))
call <- 'ggplot(input_data, aes(x=groupby.x,y=value,fill=color.by,group=groupby.x))+ ggbeeswarm::geom_quasirandom(pch=21,color="black", dodge.width = dodge.width, size=point.size, alpha = transparency) +
scale_fill_manual(values=colors) + labs(fill=color.by) +
theme_bw() + theme(panel.grid = element_blank(), plot.title = element_text(hjust=0.5, size=40),
strip.text = element_text(size=25), strip.background.x = element_blank(), legend.position = legend.position,
axis.title.y = element_text(size=20), axis.title.x=element_blank(), axis.text.x = element_text(size=axis.text.x.size))'
if(is.raw.Ct==T){
p <- p + ylab("Raw Ct Value") + scale_y_reverse() + facet_wrap(~variable, ncol=ncols, scales = scales)
call <- paste(call, '+ ylab("Raw Ct Value") + scale_y_reverse() + facet_wrap(~variable, ncol=ncols, scales = scales)')
}else{
p <- p + ylab("Normalized Expression Level") + facet_wrap(~variable, ncol=ncols, scales = scales)
call <- paste(call, '+ ylab("Normalized Expression Level") + facet_wrap(~variable, ncol=ncols, scales = scales)')
}
}
}else{  ##set to false, no grouping and no faceting
dat.to.plot <- data.frame(t(dat))
dat.to.plot <- cbind(dat.to.plot, temp.annotations)
dat.to.plot <- reshape2::melt(dat.to.plot, id.vars = c(colnames(temp.annotations)))
if (any(squishy != FALSE)) { dat.to.plot$value <- scales::squish(dat.to.plot$value, squishy)}
p <- ggplot(dat.to.plot, aes(x=variable,y=value,fill=eval(parse(text=color.by))))+ ggbeeswarm::geom_quasirandom(pch=21,color="black", size=point.size, alpha = transparency) +
scale_fill_manual(values=colors) + labs(fill=color.by) +
theme_bw() + theme(panel.grid = element_blank(), plot.title = element_text(hjust=0.5, size=40),
strip.text = element_text(size=25), strip.background.x = element_blank(), legend.position = legend.position,
axis.title.y = element_text(size=20), axis.title.x=element_blank(), axis.text.x = element_text(size=axis.text.x.size))
call <- 'ggplot(input_data, aes(x=variable,y=value,fill=color.by))+ ggbeeswarm::geom_quasirandom(pch=21,color="black", size=point.size, alpha = transparency) +
scale_fill_manual(values=colors) + labs(fill=color.by) +
theme_bw() + theme(panel.grid = element_blank(), plot.title = element_text(hjust=0.5, size=40),
strip.text = element_text(size=25), strip.background.x = element_blank(), legend.position = legend.position,
axis.title.y = element_text(size=20), axis.title.x=element_blank(), axis.text.x = element_text(size=axis.text.x.size))'
if(is.raw.Ct==T){
p <- p + ylab("Raw Ct Value") + scale_y_reverse()
call <- paste(call, '+ ylab("Raw Ct Value") + scale_y_reverse()')
}else{
p <- p + ylab("Normalized Expression Level")
call <- paste(call, '+ ylab("Normalized Expression Level")')
}
}
}
} else{ coloring = list(color.by = color.by)
if ((is.null(groupby.x) == FALSE)) {
dat.to.plot <- data.frame(t(dat))
if (groupby.x != FALSE) {  ##group by specified grouping
if (groupby.x %in% colnames(params$annotations)) {
####if data is not all samples, subset annotations appropriately
temp.annotations <- params$annotations
if (any(!is.na(temp.annotations))) {
if (any(colnames(dat) %notin% rownames(temp.annotations))) {
stop('colnames of input data do not match rownames of annotations, cannot link annotations to data')
}
temp.annotations <- temp.annotations[match(colnames(dat), rownames(temp.annotations)),, drop = FALSE]
}
dat.to.plot <- cbind(dat.to.plot, temp.annotations)
dat.to.plot <- reshape2::melt(dat.to.plot, id.vars = c(colnames(temp.annotations)))
}else{
dat.to.plot$Custom <- custom.group.vec
dat.to.plot <- reshape2::melt(dat.to.plot, id.vars = c("Custom"))
}
if (any(squishy != FALSE)) { dat.to.plot$value <- scales::squish(dat.to.plot$value, squishy)}   ##if we want to squish
if (facet.wrap == FALSE) {
p <- ggplot(dat.to.plot, aes(x=variable,y=value, group=eval(parse(text=groupby.x))))+ ggbeeswarm::geom_quasirandom(pch=21,color="black", fill = color.by, dodge.width = dodge.width, size=point.size, alpha = transparency) +
theme_bw() + theme(panel.grid = element_blank(), plot.title = element_text(hjust=0.5, size=40),
strip.text = element_text(size=25), strip.background.x = element_blank(), legend.position = legend.position,
axis.title.y = element_text(size=20), axis.title.x=element_blank(), axis.text.x = element_text(size=axis.text.x.size))
call <- 'ggplot(dat.to.plot, aes(x=variable,y=value, group=eval(parse(text=groupby.x))))+ ggbeeswarm::geom_quasirandom(pch=21,color="black", fill = color.by, dodge.width = dodge.width, size=point.size, alpha = transparency) +
theme_bw() + theme(panel.grid = element_blank(), plot.title = element_text(hjust=0.5, size=40),
strip.text = element_text(size=25), strip.background.x = element_blank(), legend.position = legend.position,
axis.title.y = element_text(size=20), axis.title.x=element_blank(), axis.text.x = element_text(size=axis.text.x.size))'
if(is.raw.Ct==T){
p <- p + ylab("Raw Ct Value") + scale_y_reverse()
call <- paste(call, '+ ylab("Raw Ct Value") + scale_y_reverse()')
}else{
p <- p + ylab("Normalized Expression Level")
call <- paste(call, '+ ylab("Normalized Expression Level")')
}
}
if (facet.wrap == TRUE) {
p <- ggplot(dat.to.plot, aes(x=eval(parse(text=groupby.x)),y=value,group=eval(parse(text=groupby.x))))+ ggbeeswarm::geom_quasirandom(pch=21,color="black", fill = color.by, dodge.width = dodge.width, size=point.size, alpha = transparency) +
theme_bw() + theme(panel.grid = element_blank(), plot.title = element_text(hjust=0.5, size=40),
strip.text = element_text(size=25), strip.background.x = element_blank(), legend.position = legend.position,
axis.title.y = element_text(size=20), axis.title.x=element_blank(), axis.text.x = element_text(size=axis.text.x.size))
call <- 'ggplot(dat.to.plot, aes(x=eval(parse(text=groupby.x)),y=value,group=eval(parse(text=groupby.x))))+ ggbeeswarm::geom_quasirandom(pch=21,color="black", fill = color.by, dodge.width = dodge.width, size=point.size, alpha = transparency) +
theme_bw() + theme(panel.grid = element_blank(), plot.title = element_text(hjust=0.5, size=40),
strip.text = element_text(size=25), strip.background.x = element_blank(), legend.position = legend.position,
axis.title.y = element_text(size=20), axis.title.x=element_blank(), axis.text.x = element_text(size=axis.text.x.size))'
if(is.raw.Ct==T){
p <- p + ylab("Raw Ct Value") + scale_y_reverse() + facet_wrap(~variable, ncol=ncols, scales = scales)
call <- paste(call, '+ ylab("Raw Ct Value") + scale_y_reverse() + facet_wrap(~variable, ncol=ncols, scales = scales)')
}else{
p <- p + ylab("Normalized Expression Level") + facet_wrap(~variable, ncol=ncols, scales = scales)
call <- paste(call, '+ ylab("Normalized Expression Level") + facet_wrap(~variable, ncol=ncols, scales = scales)')
}
}
}else{  ##set to false, no grouping and no faceting
suppressMessages( dat.to.plot <- reshape2::melt(dat.to.plot) )
if (any(squishy != FALSE)) { dat.to.plot$value <- scales::squish(dat.to.plot$value, squishy)}   ##if we want to squish
p <- ggplot(dat.to.plot, aes(x=variable,y=value))+ ggbeeswarm::geom_quasirandom(pch=21,color="black", fill = color.by, size=point.size, alpha = transparency) +
theme_bw() + theme(panel.grid = element_blank(), plot.title = element_text(hjust=0.5, size=40),
strip.text = element_text(size=25), strip.background.x = element_blank(), legend.position = legend.position,
axis.title.y = element_text(size=20), axis.title.x=element_blank(), axis.text.x = element_text(size=axis.text.x.size))
call <- 'ggplot(dat.to.plot, aes(x=variable,y=value))+ ggbeeswarm::geom_quasirandom(pch=21,color="black", fill = color.by, size=point.size, alpha = transparency) +
theme_bw() + theme(panel.grid = element_blank(), plot.title = element_text(hjust=0.5, size=40),
strip.text = element_text(size=25), strip.background.x = element_blank(), legend.position = legend.position,
axis.title.y = element_text(size=20), axis.title.x=element_blank(), axis.text.x = element_text(size=axis.text.x.size))'
if(is.raw.Ct==T){
p <- p + ylab("Raw Ct Value") + scale_y_reverse()
call <- paste(call, '+ ylab("Raw Ct Value") + scale_y_reverse()')
}else{
p <- p + ylab("Normalized Expression Level")
call <- paste(call, '+ ylab("Normalized Expression Level")')
}
}
}
} ##single color
}
if (return.ggplot.input == TRUE) {return(list(input_data=dat.to.plot, coloring = coloring, plot_call = call))}
return(p)
}
beeswarmGenes1(RAGP_norm, "Sst", exact = F)
beeswarmGenes1(rat2, "Sst", exact = F)
beeswarmGenes1(rat2, "Sst", exact = F, color.by = "Sst")
beeswarmGenes1(rat2, "Sst", exact = F, color.by = "Sstr1")
beeswarmGenes1(rat2, "Sst", exact = F, color.by = "Sstr1", custom.group.vec = c(rep(1,100), rep(2,51)))
beeswarmGenes1(rat2, "Sst", exact = F, custom.group.vec = c(rep(1,100), rep(2,51)))
scatterGenes1(RAGP_norm, "Th","Chat")
scatterGenes1(RAGP_norm, "Th","Chat", color.by = "Animal")
scatterGenes1(rat2, "Th","Sstr1")
scatterGenes1(rat2, "Th","Sstr1", color.by = "Animal")
scatterGenes1(rat2, "Th","Sstr1", custom.color.vec = c(rep("red",100), rep("blue",51)))
DensityGenes1 <- function(
data,
list,
color.by = "blue", ##also dictates how it will split, need option to make custom vector to split on
exact = TRUE,
facet.annotation = FALSE,
is.raw.Ct = FALSE,
na.fix = 2,
transparency = 0.5,
ncols=2, ##can change
scales="free",
legend.position = "default",
return.ggplot.input = FALSE
){
if (("matrix" %in% class(data)) != TRUE ) {
data <- as.matrix(data)
warning('input data converted to matrix')
}
if (exact == TRUE) {dat<-data[which(rownames(data) %in% list),, drop = FALSE]
if (length(dat) == 0 ) {stop('exact matches for list not found in rownames data')}
if (is.raw.Ct==F & na.fix!=F) {dat[which(is.na(dat))] <- (min(dat, na.rm=T)-na.fix)};if (is.raw.Ct==T & na.fix!=F) {dat[which(is.na(dat))]<- (max(dat, na.rm=T)+na.fix)}}
if (exact == FALSE) {dat<-data[grep(paste(list, collapse = "|"),rownames(data)),, drop = FALSE]
if (length(dat) == 0 ) {stop('inexact matches for list not found in rownames data')}
if (is.raw.Ct==F & na.fix!=F) {dat[which(is.na(dat))] <- (min(dat, na.rm=T)-na.fix)};if (is.raw.Ct==T & na.fix!=F) {dat[which(is.na(dat))]<- (max(dat, na.rm=T)+na.fix)}}
if (color.by %in% colnames(params$annotations)) {
temp.annotations <- params$annotations
if (legend.position == "default") { legend.position <- "right"}
if (any(colnames(dat) %notin% rownames(temp.annotations))) {
stop('colnames of input data do not match rownames of annotations, cannot link annotations to data')
}
temp.annotations <- temp.annotations[match(colnames(dat), rownames(temp.annotations)),, drop = FALSE]
dat.to.plot <- data.frame(t(dat)); dat.to.plot <- cbind(dat.to.plot, temp.annotations)
dat.to.plot <- reshape2::melt(dat.to.plot, id.vars = colnames(temp.annotations))
if (color.by %in% names(params$annot_cols)) {
colors <- params$annot_cols[[which(names(params$annot_cols) == color.by)]]
coloring <- list(color.by = color.by, colors = colors)
}else{
colors <- scales::hue_pal()(length(levels(as.factor(dat.to.plot[,which(colnames(dat.to.plot) == color.by)]))))
coloring <- list(color.by = color.by, colors = colors)
}
p <- ggplot(dat.to.plot, aes(x=value,fill=eval(parse(text = color.by))))+ geom_density(alpha = transparency) +
scale_fill_manual(values=colors) + labs(fill=color.by) +
theme_bw() + theme(panel.grid = element_blank(), plot.title = element_text(hjust=0.5, size=40),
strip.text = element_text(size=25), strip.background.x = element_blank(), legend.position = legend.position,
axis.title = element_text(size=20), axis.text.x = element_text(size = 15))
call <- 'ggplot(input_data, aes(x=value,fill=color.by))+ geom_density(alpha = transparency) +
scale_fill_manual(values=colors) + labs(fill=color.by) +
theme_bw() + theme(panel.grid = element_blank(), plot.title = element_text(hjust=0.5, size=40),
strip.text = element_text(size=25), strip.background.x = element_blank(), legend.position = legend.position,
axis.title = element_text(size=20), axis.text.x = element_text(size = 15))'
if (facet.annotation == FALSE) {
p <- p + facet_wrap(~variable, ncol=ncols, scales=scales)
call <- paste(call, '+ facet_wrap(~variable, ncol=ncols, scales=scales)')
}else{ if (facet.annotation == "wrap") {p <- p + facet_wrap(eval(parse(text = color.by))~variable, scales=scales)
call <- paste(call, '+ facet_wrap(eval(parse(text = color.by))~variable, scales=scales)')
}else{p <- p + facet_grid(eval(parse(text = color.by))~variable, scales=scales)
call <- paste(call, '+ facet_grid(eval(parse(text = color.by))~variable, scales=scales)')
}}
if(is.raw.Ct==T){
p <- p + xlab("Raw Ct Value") + ylab("Denstiy") + scale_x_reverse()
call <- paste(call, '+ xlab("Raw Ct Value") + ylab("Denstiy") + scale_x_reverse()')
}else{
p <- p + xlab("Normalized Expression Level") + ylab("Density")
call <- paste(call, '+ xlab("Normalized Expression Level") + ylab("Density")')
}
} else{ coloring <- list(color.by = color.by)
dat.to.plot <- data.frame(t(dat))
dat.to.plot <- suppressMessages( reshape2::melt(dat.to.plot) )
p <- ggplot(dat.to.plot, aes(x=value))+ geom_density(alpha = transparency, fill = color.by) + facet_wrap(~variable, ncol=ncols, scales=scales) +
theme_bw() + theme(panel.grid = element_blank(), plot.title = element_text(hjust=0.5, size=40),
strip.text = element_text(size=25), strip.background.x = element_blank(), legend.position = legend.position,
axis.title = element_text(size=20), axis.text.x = element_text(size = 15))
call <- 'ggplot(input_data, aes(x=value))+ geom_density(alpha = transparency, fill = color.by) + facet_wrap(~variable, ncol=ncols, scales=scales) +
theme_bw() + theme(panel.grid = element_blank(), plot.title = element_text(hjust=0.5, size=40),
strip.text = element_text(size=25), strip.background.x = element_blank(), legend.position = legend.position,
axis.title = element_text(size=20), axis.text.x = element_text(size = 15))'
if(is.raw.Ct==T){
p <- p + xlab("Raw Ct Value") + ylab("Denstiy") + scale_x_reverse()
call <- paste(call, '+ xlab("Raw Ct Value") + ylab("Denstiy") + scale_x_reverse()')
}else{
p <- p + xlab("Normalized Expression Level") + ylab("Density")
call <- paste(call, '+ xlab("Normalized Expression Level") + ylab("Density")')
}
}
if (return.ggplot.input == TRUE) {return(list(input_data=dat.to.plot, coloring = coloring, plot_call = call))}
return(p)
}
DensityGenes1(RAGP_norm,"Npy", exact = F)
DensityGenes1(RAGP_norm,"Npy", exact = F, color.by = "Animal")
DensityGenes1(rat2,"Npy", exact = F)
myHeatmap(rat2)
beeswarmGenes1(RAGP_norm, "Npy", exact = F, color.by = "Connectivity")
beeswarmGenes1(RAGP_norm, "Npy", exact = F, color.by = "Connectivity", groupby.x = F)
beeswarmGenes1(RAGP_norm, "Npy", exact = F, color.by = "Connectivity", groupby.x = "Animal")
beeswarmGenes1(RAGP_norm, "Npy", exact = F, color.by = "Connectivity", groupby.x = "Animal", facet.wrap = T)
beeswarmGenes1(RAGP_norm, "Npy", exact = F,groupby.x = "Animal", facet.wrap = T)
beeswarmGenes1(RAGP_norm, "Npy", exact = F,groupby.x = "Animal")
beeswarmGenes1(RAGP_norm, "Npy", exact = F,groupby.x = "Animal", color.by = "Npy")
beeswarmGenes1(RAGP_norm, "Npy", exact = F,groupby.x = "Animal", color.by = "Npy", facet.wrap = T)
beeswarmGenes1(RAGP_norm, "Npy", exact = F, color.by = "Npy")
beeswarmGenes1(RAGP_norm, "Npy", exact = F)
beeswarmGenes1(RAGP_norm, "Npy", exact = F, groupby.x = "Animal")
beeswarmGenes1(RAGP_norm, "Npy", exact = F, groupby.x = "Animal", squishy = c(-2,2))
myPCA(RAGP_norm)
myPCA(RAGP_norm, color.by = "Npy")
myPCA(RAGP_norm, color.by = "Animal")
myPCA(rat2)
myPCA(rat2, color.by = "Npy")
myPCA(rat2, color.by = "Gal")
library(dataVisEasy)
library(dataVisEasy)
library(dataVisEasy)
?pheatmap
?scale
?switch
library(dataVisEasy)
set_annotations(RAGP_annots)
myHeatmap(RAGP_rawCt, is.raw.Ct = T)
myHeatmap(RAGP_rawCt, is.raw.Ct = T)
set_scale.range(c(5,15))
myHeatmap(RAGP_rawCt, is.raw.Ct = T)
myHeatmap(RAGP_rawCt, is.raw.Ct = T, na.fix = T)
myHeatmap(RAGP_norm, is.raw.Ct =F, na.fix = T)
set_scale.range(c(-1,1)
)
myHeatmap(RAGP_norm, is.raw.Ct =F, na.fix = T)
library(dataVisEasy)
myHeatmap(RAGP_norm)
myHeatmap(RAGP_rawCt)
myHeatmap(RAGP_rawCt, na.fix = T, is.raw.Ct = T)
myHeatmap(RAGP_rawCt, na.fix = T, is.raw.Ct = T, scale.rows = "median")
myHeatmap(RAGP_rawCt, na.fix = T, is.raw.Ct = T, scale.rows = "zscore")
library(dataVisEasy)
myHeatmap(RAGP_rawCt, na.fix = T, is.raw.Ct = T, scale.rows = "zscore")
set_annotations(RAGP_annots)
set_annot_samps()
myHeatmapByAnnotation(RAGP_rawCt, na.fix = T, is.raw.Ct = T, scale.rows = "zscore", groupings = "Connectivity")
set_annot_samps(c("Connectivity","Animal","State"))
myHeatmapByAnnotation(RAGP_rawCt, na.fix = T, is.raw.Ct = T, scale.rows = "zscore", groupings = "Connectivity")
myHeatmapByAnnotation(RAGP_rawCt, na.fix = T, is.raw.Ct = T, scale.rows = "median", groupings = "Connectivity")
myHeatmapByAnnotation(RAGP_norm, na.fix = T, scale.rows = "median", groupings = "Connectivity")
myHeatmapByAnnotation(RAGP_norm, na.fix = T, scale.rows = "zscore", groupings = "Connectivity")
?pheatmap
library(dataVisEasy)
library(dataVisEasy)
library(dataVisEasy)
install.packages("rlang")
install.packages("rlang")
library(rlang)
sessionInfo()
remove.packages("rlang")
install.packages("rlang")
install.packages("rlang")
library(dataVisEasy)
install.packages("rlang")
remove.packages("rlang")
library(dataVisEasy)
sessionInfo()
install.packages("rlang")
library(rlang)
sessionInfo()
library(dataVisEasy)
remove.packages("ellipsis")
install.packages("ellipsis")
install.packages("ellipsis")
library(dataVisEasy)
remove.packages("vctrs")
install.packages("vctrs")
library(dataVisEasy)
remove.packages("xfun")
install.packages("xfun")
usethis::create_package()
usethis::create_package("D://Dropbox (SBG)/SHR-Work/Alison-DataVis-Package/dataVisEasy/")
library(dataVisEasy)
devtools::document()
devtools::document()
library(dataVisEasy)
usethis::use_gpl_license()
library(dataVisEasy)
library(dataVisEasy)
library(dataVisEasy)
