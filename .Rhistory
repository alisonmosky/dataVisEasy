corrs2Gene(data,goi)   ##will return histogram of correlations to gene of interest
lims <- c(-0.3,0.3)   ##pick limits based on what you want to see in heatmap, will return genes with negative correlation
corrs2Gene(data,"Gal", limits=lims)  ##otherwise wrapper for myHeatmap
myHeatmap(data)
myHeatmap(data, NA.handling = "use.all")
myHeatmap(data, NA.handling = "use.everything")
myHeatmap(data, NA.handling = "everything")
myHeatmap(data, NA.handling = "all")
?hclust
?cor
myHeatmap(data, NA.handling = "all.obs")
myHeatmap(data, NA.handling = "complete.obs")
myHeatmap(data, NA.handling = "na.or.complete")
myHeatmap(data, NA.handling = "pairwise.complete.obs")
?usethis::use_data
setwd("D:/Dropbox (SBG)/SHR-Work/Alison-DataVis-Package/dataVisEasy")
usethis::use_data("../Demo_Pig_Normalized_trimmed.txt")
usethis::use_data(common.norm)
usethis::use_data(all.raw)
usethis::use_data(all.annots)
load("D:/Dropbox (SBG)/SHR-Work/Alison-DataVis-Package/dataVisEasy/data/all.annots.rda")
library(dataVisEasy)
rm(list=ls())
library(dataVisEasy)
initiate_params(parameters)
common.norm <- data("common.norm")
common.norm
data("common.norm")
common.norm
rm(list=ls())
initiate_params(parameters)
data("common.norm")
head(common.norm)
rm(list=ls())
initiate_params(parameters)
head(common.norm)
data()
setwd("D:/Dropbox (SBG)/SHR-Work/Alison-DataVis-Package/dataVisEasy-Package-Demo")
common.norm <- as.matrix(read.table("Demo_Pig_Normalized_trimmed.txt", sep="\t", header=T, row.names = 1));colnames(common.norm) <- gsub("\\.","-",colnames(common.norm))
all.raw <- as.matrix(read.table("Demo_Pig_all_raw.txt", sep="\t", header=T, row.names = 1));colnames(all.raw) <- gsub("\\.","-",colnames(all.raw))
all.annots <- read.table("Demo_Pig_Annotations.txt", sep="\t", header=T, stringsAsFactors = T, row.names = 1) ;rownames(all.annots) <- gsub("\\.","-",rownames(all.annots))
RAGP_norm <- common.norm
RAGP_rawCt <- all.raw
RAGP_annots <- all.annots
setwd("D:/Dropbox (SBG)/SHR-Work/Alison-DataVis-Package/dataVisEasy")
usethis::use_data(RAGP_norm)
usethis::use_data(RAGP_rawCt)
usethis::use_data(RAGP_annots)
library(dataVisEasy)
?RAGP_norm
?full_join
?update_annotations.genes
rm(list=ls())
library(dataVisEasy)
initiate_params(parameters)
data("RAGP_norm")
RAGP_norm[1:5,1:5]
dim(RAGP_norm)
data("RAGP_rawCt")
dim(RAGP_rawCt)
data("RAGP_annots")
head(RAGP_annots)
library(dataVisEasy)
initiate_params(parameters)
data("RAGP_annots")
?RAGP_annots
data()
?band_instruments
?diamonds
browseVignettes()
library(dataVisEasy)
?RAGP_annots
?PTM
library(dataVisEasy)
?volcano
library(dataVisEasy)
a <- pcaMethods::pca(data)
a <- pcaMethods::pca(RAGP_norm)
a.scrs <- pcaMethods::scores(a)
a.ldgs <- pcaMethods::loadings(a)
head(a.scrs)
a <- pcaMethods::pca(RAGP_norm, nPcs = 5)
a.scrs <- pcaMethods::scores(a)
a.ldgs <- pcaMethods::loadings(a)
head(a.scrs)
head(a.ldgs)
library(dataVisEasy)
DensityGenes <- function(
data,
list,
color.by = "blue", ##also dictates how it will split, need option to make custom vector to split on
exact = TRUE,
is.raw.Ct = FALSE,
na.fix = 2,
transparency = 0.5,
ncols=2, ##can change
scales="free",
legend.position = "right",
return.ggplot.input = FALSE
){
if (("matrix" %in% class(data)) != TRUE ) {
data <- as.matrix(data)
warning('input data converted to matrix')
}
if (exact == TRUE) {dat<-data[which(rownames(data) %in% list),, drop = FALSE]
if (length(dat) == 0 ) {stop('exact matches for list not found in rownames data')}
if (is.raw.Ct==F & na.fix!=F) {dat[which(is.na(dat))] <- (min(dat, na.rm=T)-na.fix)};if (is.raw.Ct==T & na.fix!=F) {dat[which(is.na(dat))]<- (max(dat, na.rm=T)+na.fix)}}
if (exact == FALSE) {dat<-data[grep(paste(list, collapse = "|"),rownames(data)),, drop = FALSE]
if (length(dat) == 0 ) {stop('inexact matches for list not found in rownames data')}
if (is.raw.Ct==F & na.fix!=F) {dat[which(is.na(dat))] <- (min(dat, na.rm=T)-na.fix)};if (is.raw.Ct==T & na.fix!=F) {dat[which(is.na(dat))]<- (max(dat, na.rm=T)+na.fix)}}
temp.annotations <- params$annotations
if (color.by %in% colnames(temp.annotations)) {
if (sum(colnames(dat) %notin% rownames(temp.annotations)) != 0 ) {
stop('colnames of input data do not match rownames of annotations, cannot link annotations to data')
}
temp.annotations <- temp.annotations[match(colnames(dat), rownames(temp.annotations)),, drop = FALSE]
dat.to.plot <- data.frame(t(dat)); dat.to.plot <- cbind(dat.to.plot, temp.annotations)
dat.to.plot <- melt(dat.to.plot, id.vars = colnames(temp.annotations))
if (color.by %in% names(params$annot_cols)) {
cols <- as.factor(dat.to.plot[,which(colnames(dat.to.plot) == color.by)])
colors <- params$annot_cols[[which(names(params$annot_cols) == color.by)]]
}else{
cols <- as.factor(dat.to.plot[,which(colnames(dat.to.plot) == color.by)])
colors <- scales::hue_pal()(length(levels(cols)))
}
p <- ggplot(dat.to.plot, aes(x=value,fill=cols, group=eval(parse(text = color.by))))+ geom_density(alpha = transparency) + facet_wrap(~variable, ncol=ncols, scales=scales) +
scale_fill_manual(values=colors) + labs(fill=color.by) + #ggtitle(paste(list)) +
theme_bw() + theme(panel.grid = element_blank(), plot.title = element_text(hjust=0.5, size=40),
strip.text = element_text(size=25), strip.background.x = element_blank(), legend.position = legend.position,
axis.title = element_text(size=20), axis.text.x = element_text(size = 15))
if(is.raw.Ct==T){
p <- p + xlab("Raw Ct Value") + ylab("Denstiy") + scale_y_reverse()
}else{
p <- p + xlab("Normalized Expression Level") + ylab("Density")
}
} else{ cols <- color.by; colors <- color.by
dat.to.plot <- data.frame(t(dat)); dat.to.plot <- cbind(dat.to.plot, temp.annotations)
dat.to.plot <- melt(dat.to.plot, id.vars = colnames(temp.annotations))
suppressWarnings(if (is.na(temp.annotations) == TRUE) {
dat.to.plot <- dat.to.plot[-which(dat.to.plot$variable == "temp.annotations"),]
})
p <- ggplot(dat.to.plot, aes(x=value,fill=cols))+ geom_density(alpha = transparency) + facet_wrap(~variable, ncol=ncols, scales=scales) +
scale_fill_manual(values=colors) + #ggtitle(paste(list)) +
theme_bw() + theme(panel.grid = element_blank(), plot.title = element_text(hjust=0.5, size=40),
strip.text = element_text(size=25), strip.background.x = element_blank(), legend.position = legend.position,
axis.title = element_text(size=20), axis.text.x = element_text(size = 15))
if(is.raw.Ct==T){
p <- p + xlab("Raw Ct Value") + ylab("Denstiy") + scale_y_reverse()
}else{
p <- p + xlab("Normalized Expression Level") + ylab("Density")
}
}
if (return.ggplot.input == TRUE) {return(dat.to.plot)}
return(p)
}
library(dataVisEasy)
?`dataVisEasy-package`
?initiate_params
library(dataVisEasy)
.onAttach <- function(dataVisEasy, dataVisEasy) {
packageStartupMessage("Welcome to my package please let this work")
}
?.onAttach
.onAttach <- function(dataVisEasy) {
packageStartupMessage("Welcome to my package please let this work")
}
library(dataVisEasy)
devtools::document()
setwd("D:/Dropbox (SBG)/SHR-Work/Alison-DataVis-Package/dataVisEasy")
setwd("D:/Dropbox (SBG)/SHR-Work/Alison-DataVis-Package/dataVisEasy")
devtools::document()
View(DensityGenes)
devtools::document()
devtools::create()
devtools::create("../dat2")
library(dataVisEasy)
?dataVisEasy
library(dataVisEasy)
params
initiate_params(parameters)
params
library(dataVisEasy)
initiate_params(parameters)
params
data("RAGP_annots")
head(RAGP_annots)
set_annotations(RAGP_annots)
head(params$annotations)
View(RAGP_annots)
sum(is.na(RAGP_annots))
library(dataVisEasy)
library(dataVisEasy)
initiate_params(parameters)
params
data("RAGP_annots")
head(RAGP_annots)
set_annotations(RAGP_annots)
head(params$annotations)
data("RAGP_annots")
head(RAGP_annots)
data("RAGP_norm")
RAGP_norm[1:5,1:5]
myHeatmap(RAGP_norm)
myHeatmap(RAGP_norm, list = c("Sst","Npy","Th","Dbh","Gal","Chat"))
myHeatmap(RAGP_norm, list = c("Sst","Npy","Th","Dbh","Gal","Chat"), exact = F)
myHeatmap(RAGP_norm, list = c("Sst","Npy","Th","Dbh","Gal","Chat","Ache","Pnmt","Scn1a","Cacna1a","Cacna1c"))
myHeatmap(RAGP_norm, list = c("Sst","Npy","Gal"), exact = F)
myHeatmap(RAGP_norm, list = c("Kcn","Cacn","Scn"), exact = F, main = "Ion Channels")
myPCA(RAGP_norm)
myPCA(RAGP_norm, nPcs = 5, PCs.to.plot = c("PC1","PC3"))
myPCA(RAGP_norm, to.pca = "genes")
myPCA(RAGP_norm, color.by = "Connectivity")
myPCA(RAGP_norm, nPcs = 5, PCs.to.plot = c("PC1","PC3"), color.by = "Sex")
myPCA(RAGP_norm, to.pca = "genes", color.by = "Animal")
myPCA(RAGP_norm, to.pca = "genes", color.by = "Animal")
myPCA(RAGP_norm, color.by = "Connectivity")
myPCA(RAGP_norm, nPcs = 5, PCs.to.plot = c("PC1","PC3"), color.by = "Sex")
RAGP_annots$Connectivity
state.cols <- brewer.pal(6,"Set1"); names(state.cols) <- LETTERS[1:6]
annot_cols <- list('Connectivity'=c("Projecting"="blue","Non-Projecting"="violet","NONE"="grey"),
'Animal'=c("Pig-M1"="#0571b0","Pig-F1"="#ca0020","Pig-M2"="#92c5de","Pig-F2"="#f4a582"),
"State"=c(state.cols))
set_annot_cols(annot_cols)
myPCA(RAGP_norm, color.by = "Connectivity")
myPCA(RAGP_norm, nPcs = 5, PCs.to.plot = c("PC1","PC3"), color.by = "Animal")
library(dataVisEasy)
library(dataVisEasy)
myPCA(RAGP_norm)
myPCA(RAGP_norm, nPcs = 5, PCs.to.plot = c("PC1","PC3"))
myPCA(RAGP_norm, to.pca = "genes")
myPCA(RAGP_norm)
myPCA(RAGP_norm, nPcs = 5, PCs.to.plot = c("PC1","PC3"))
myPCA(RAGP_norm, to.pca = "genes")
library(dataVisEasy)
library(dataVisEasy)
library(dataVisEasy)
library(dataVisEasy)
initiate_params(parameters)
params
data("RAGP_annots")
head(RAGP_annots)
data("RAGP_norm")
RAGP_norm[1:5,1:5]
myPCA(RAGP_norm)
myPCA(RAGP_norm, nPcs = 5, PCs.to.plot = c("PC1","PC3"))
myPCA(RAGP_norm, to.pca = "genes")
data("RAGP_annots")
head(RAGP_annots)
data("RAGP_norm")
RAGP_norm[1:5,1:5]
data("RAGP_annots")
knitr::kable(head(RAGP_annots))
data("RAGP_norm")
RAGP_norm[1:5,1:5]
data("RAGP_annots")
knitr::kable(head(RAGP_annots))
data("RAGP_norm")
knitr::kable(RAGP_norm[1:5,1:5])
initiate_params(parameters)
knitr::kable(params)
initiate_params(parameters)
params
initiate_params(parameters)
params
knitr::kable(params)
library(dataVisEasy)
library(dataVisEasy)
rm(list=ls())
library(dataVisEasy)
data(RAGP_annots)
set_annotations(RAGP_annots)
library(dataVisEasy)
?initiate_params
initiate_params(parameters)
?parameters
rm(list=ls())
library(dataVisEasy)
library(dataVisEasy)
rm(list=ls())
library(dataVisEasy)
library(dataVisEasy)
library(dataVisEasy)
rm(list=ls())
library(dataVisEasy)
library(dataVisEasy)
rm(list=ls())
library(dataVisEasy)
View(params)
library(dataVisEasy)
data("RAGP_annots")
set_annotations(RAGP_annots)
library(dataVisEasy)
?params
library(dataVisEasy)
?params
library(dataVisEasy)
?params
library(dataVisEasy)
?params
?RAGP_annots
library(dataVisEasy)
?params
library(dataVisEasy)
library(dataVisEasy)
data("RAGP_norm")
myHeatmap(RAGP_norm)
myHeatmap(RAGP_norm,border.color = "grey60")
myHeatmap(RAGP_norm, c("Th","Chat","Sst","Npy","Gal","Cacn"), exact = F)
myHeatmap(RAGP_norm, c("Th","Chat","Sst","Npy","Gal","Cacn"), exact = F, border.color = "black")
myHeatmap(RAGP_norm, c("Th","Chat","Sst","Npy","Gal","Cacn"), exact = F, border.color = "white")
myHeatmap(RAGP_norm, c("Th","Chat","Sst","Npy","Gal","Cacn"), exact = F, na.color = "black")
myHeatmap(RAGP_norm[,1:50], c("Th","Chat","Sst","Npy","Gal","Cacn"), exact = F, na.color = "black")
myHeatmap(RAGP_norm[,1:50], c("Th","Chat","Sst","Npy","Gal","Cacn"), exact = F)
myHeatmap(RAGP_norm[,1:50], c("Th","Chat","Sst","Npy","Gal","Cacn"), exact = F, border.color = NA)
myHeatmap(RAGP_norm[,1:50], c("Th","Chat","Sst","Npy","Gal","Cacn"), exact = F, border.color = "grey60")
myHeatmap(RAGP_norm[,1:50], c("Th","Chat","Sst","Npy","Gal","Cacn"), exact = F, border.color = "white")
myHeatmap(RAGP_norm[,1:100], c("Th","Chat","Sst","Npy","Gal","Cacn"), exact = F, border.color = "white")
myHeatmap(RAGP_norm[,1:200], c("Th","Chat","Sst","Npy","Gal","Cacn"), exact = F, border.color = "white")
myHeatmap(RAGP_norm[,1:150], c("Th","Chat","Sst","Npy","Gal","Cacn"), exact = F, border.color = "white")
myHeatmap(RAGP_norm[,1:100], c("Th","Chat","Sst","Npy","Gal","Cacn"), exact = F, border.color = "white")
myHeatmap(RAGP_norm[,1:110], c("Th","Chat","Sst","Npy","Gal","Cacn"), exact = F, border.color = "white")
myHeatmap(RAGP_norm[,1:120], c("Th","Chat","Sst","Npy","Gal","Cacn"), exact = F, border.color = "white")
myHeatmap(RAGP_norm[,1:130], c("Th","Chat","Sst","Npy","Gal","Cacn"), exact = F, border.color = "white")
myHeatmap(RAGP_norm[,1:140], c("Th","Chat","Sst","Npy","Gal","Cacn"), exact = F, border.color = "white")
myHeatmap(RAGP_norm[,1:130], c("Th","Chat","Sst","Npy","Gal","Cacn"), exact = F, border.color = "white")
myHeatmap(RAGP_norm[,1:135], c("Th","Chat","Sst","Npy","Gal","Cacn"), exact = F, border.color = "white")
myHeatmap(RAGP_norm[,1:132], c("Th","Chat","Sst","Npy","Gal","Cacn"), exact = F, border.color = "white")
myHeatmap(RAGP_norm[,1:131], c("Th","Chat","Sst","Npy","Gal","Cacn"), exact = F, border.color = "white")
myHeatmap(RAGP_norm[,1:130], c("Th","Chat","Sst","Npy","Gal","Cacn"), exact = F, border.color = "white")
myHeatmap(RAGP_norm[,1:10], c("Th","Chat","Sst","Npy","Gal","Cacn"), exact = F, border.color = "white")
myHeatmap(RAGP_norm[,1:10], c("Th","Chat","Sst","Npy","Gal","Cacn"), exact = F, border.color = "white", na.fix = T)
myHeatmap(RAGP_norm[,1:10], c("Th","Chat","Sst","Npy","Gal","Cacn"), exact = F, border.color = "white", clust.cols = F)
myHeatmap(RAGP_norm[,1:10], c("Th","Chat","Sst","Npy","Gal","Cacn"), exact = F, border.color = "white", clust.rows = F)
myHeatmap(RAGP_norm[,1:5], c("Th","Chat","Sst","Npy","Gal","Cacn"), exact = F, border.color = "white", clust.rows = F)
library(dataVisEasy)
data("RAGP_rawCt")
myHeatmap(RAGP_rawCt, c("Cacn","Kcn","Hcn","Scn"), exact = F, is.raw.Ct = T)
set_scale.range(c(10,20))
myHeatmap(RAGP_rawCt, c("Cacn","Kcn","Hcn","Scn"), exact = F, is.raw.Ct = T, order.by.gene = "Hcn2")
myHeatmap(RAGP_rawCt, c("Cacn","Kcn","Hcn","Scn"), exact = F, is.raw.Ct = T, order.by.gene = "Hcn2", clust.rows = F)
p <- myHeatmap(RAGP_rawCt, c("Cacn","Kcn","Hcn","Scn"), exact = F, is.raw.Ct = T, order.by.gene = "Hcn2", clust.rows = F)
ions <- ExtractMatrix(RAGP_rawCt, p, clustered.cols = F, clustered.rows = F)
myHeatmap(ions, clust.rows = F, clust.cols = F)
ions <- ExtractMatrix(RAGP_rawCt, p)
p <- myHeatmap(RAGP_rawCt, c("Cacn","Kcn","Hcn","Scn"), exact = F, is.raw.Ct = T, order.by.gene = "Hcn2", clust.rows = F, show.colnames = T)
ions <- ExtractMatrix(RAGP_rawCt, p, clustered.cols = F, clustered.rows = F)
ions <- ExtractMatrix(RAGP_rawCt, p)
myHeatmap(ions, clust.rows = F, clust.cols = F)
myHeatmap(ions, clust.rows = F, clust.cols = F, is.raw.Ct = T)
writexl::write_xlsx(ions, "C://Users/aliso/Desktop/RAGP_Ion_Channels_rawCt.xlsx")
writexl::write_xlsx(as.data.frame(ions), "C://Users/aliso/Desktop/RAGP_Ion_Channels_rawCt.xlsx")
write.table(ions, "C://Users/aliso/Desktop/RAGP_Ion_Channels_rawCt.txt", sep = "\t")
p$gtable[["grobs"]][[text.attributes[2]]][["label"]]
heatmap <- p
attributes <- unlist(lapply(heatmap$gtable$grobs, function(x)(x$name)))
text.attributes <- grep("GRID.text", attributes)
colord <- heatmap$gtable[["grobs"]][[text.attributes[2]]][["label"]]
roword <- heatmap$gtable[["grobs"]][[text.attributes[3]]][["label"]]
roword
ExtractMatrix <- function(   ##from clustered heatmap, will extract the exact matrix
data, ##data heatmap is based off of, (needs to be subset for genes already?)
heatmap, ##input should be the heatmap saved as a variable, output will be the matrix in the order that the heatmap is output as
clustered.cols = TRUE, ##assumes that heatmap$tree_col exists
clustered.rows = TRUE ##assumes that heatmap$tree_row exists
){
if (("matrix" %in% class(data)) != TRUE ) {
data <- as.matrix(data)
warning('input data converted to matrix')
}
attributes <- unlist(lapply(heatmap$gtable$grobs, function(x)(x$name)))
text.attributes <- grep("GRID.text", attributes)
ordered <- data
##extract columns
colord <- heatmap$gtable[["grobs"]][[text.attributes[2]]][["label"]]
ordered <- ordered[,colnames(ordered) %in% colord]
if(clustered.cols==TRUE){
ordered <- ordered[,match(colord,colnames(ordered))]
}
##extract rows
roword <- heatmap$gtable[["grobs"]][[text.attributes[3]]][["label"]]
ordered <- ordered[rownames(ordered) %in% roword,]
if(clustered.rows==TRUE){
ordered <- ordered[match(roword,rownames(ordered)),]
}
return(ordered)
}
ions2 <- ExtractMatrix(RAGP_rawCt, p, clustered.cols = F, clustered.rows = F)
library(dataVisEasy)
library(dataVisEasy)
# library(pheatmap)
# library(pcaMethods)
# library(ggplot2)
# library(cluster)
# library(gtools)
# library(ggbeeswarm)
library(rgl)
# library(reshape2)
library(VennDiagram)
# library(RColorBrewer)
# library(tidyr)
# library(plotrix)
# library(plyr)
# library(dplyr)
library(clusterProfiler)
library(DOSE)
library(openxlsx)
futile.logger::flog.threshold(futile.logger::ERROR, name = "VennDiagramLogger")
library(networkD3)
prefix <- "D://"
# source(paste0(prefix,"/Dropbox (SBG)/SHR-Work/Alison-DataVis-Package/Package-Code5.R"))
library(dataVisEasy)
source(paste0(prefix,"/Dropbox (SBG)/SHR-Work/Alison-DataVis-Package/Extra_Functions.R"))
##Import Common Items and set Annotations####
full <- read.table("All_Brainstem_rld_table.txt", sep="\t", header=T); colnames(full) <- gsub("\\.","-", colnames(full))
setwd("D:/Dropbox (SBG)/SHR-Work/Integration")
##Import Common Items and set Annotations####
full <- read.table("All_Brainstem_rld_table.txt", sep="\t", header=T); colnames(full) <- gsub("\\.","-", colnames(full))
full.Z <- read.table("All_Brainstem_Zscored_table.txt", sep = "\t", header = T); colnames(full.Z) <- gsub("\\.","-", colnames(full.Z))
full.Z.all <- read.table("All_Brainstem_Samples_Zscored_table.txt", sep = "\t", header = T); colnames(full.Z.all) <- gsub("\\.","-", colnames(full.Z.all))
all.compact.1.5 <- read.table("All_COMPACT_Assignments_Qval_0.2_FC_1.5.txt", sep="\t", header=T)
all.compact.2 <- read.table("All_COMPACT_Assignments_Qval_0.2_FC_2.txt", sep="\t", header=T)
all.annots <- read.csv(paste0(prefix,"Dropbox (SBG)/SHR-Work/Integration/All_Brainstem_Annotations.csv"), row.names = 1); all.annots$Age <- gsub("8","08",all.annots$Age) %>% as.factor(); all.annots$Strain <- factor(all.annots$Strain, levels=c("W","S", "Both"))
all.annots$Animal <- as.factor(gsub("(.*-F\\-[1-9]).*", "\\1", all.annots$Sample))
age.cols.stack <- brewer.pal(5,"Set1"); names(age.cols.stack) <- levels(all.annots$Age)
rm(list=ls())
# library(pheatmap)
# library(pcaMethods)
# library(ggplot2)
# library(cluster)
# library(gtools)
# library(ggbeeswarm)
library(rgl)
# library(reshape2)
library(VennDiagram)
# library(RColorBrewer)
# library(tidyr)
# library(plotrix)
# library(plyr)
# library(dplyr)
library(clusterProfiler)
library(DOSE)
library(openxlsx)
futile.logger::flog.threshold(futile.logger::ERROR, name = "VennDiagramLogger")
library(networkD3)
prefix <- "D://"
# source(paste0(prefix,"/Dropbox (SBG)/SHR-Work/Alison-DataVis-Package/Package-Code5.R"))
library(dataVisEasy)
source(paste0(prefix,"/Dropbox (SBG)/SHR-Work/Alison-DataVis-Package/Extra_Functions.R"))
##Import Common Items and set Annotations####
full <- read.table("All_Brainstem_rld_table.txt", sep="\t", header=T); colnames(full) <- gsub("\\.","-", colnames(full))
setwd("D:/Dropbox (SBG)/SHR-Work/Integration")
full.Z <- read.table("All_Brainstem_Zscored_table.txt", sep = "\t", header = T); colnames(full.Z) <- gsub("\\.","-", colnames(full.Z))
full.Z.all <- read.table("All_Brainstem_Samples_Zscored_table.txt", sep = "\t", header = T); colnames(full.Z.all) <- gsub("\\.","-", colnames(full.Z.all))
all.compact.1.5 <- read.table("All_COMPACT_Assignments_Qval_0.2_FC_1.5.txt", sep="\t", header=T)
all.compact.2 <- read.table("All_COMPACT_Assignments_Qval_0.2_FC_2.txt", sep="\t", header=T)
all.annots <- read.csv(paste0(prefix,"Dropbox (SBG)/SHR-Work/Integration/All_Brainstem_Annotations.csv"), row.names = 1); all.annots$Age <- gsub("8","08",all.annots$Age) %>% as.factor(); all.annots$Strain <- factor(all.annots$Strain, levels=c("W","S", "Both"))
all.annots$Animal <- as.factor(gsub("(.*-F\\-[1-9]).*", "\\1", all.annots$Sample))
age.cols.stack <- brewer.pal(5,"Set1"); names(age.cols.stack) <- levels(all.annots$Age)
age.cols.stack <- RColorBrewer::brewer.pal(5,"Set1"); names(age.cols.stack) <- levels(all.annots$Age)
library(dataVisEasy)
data("RAGP_norm")
data("RAGP_rawCt")
data("RAGP_annots")
set_annotations(RAGP_annots)
###set sample annotations to be colored in heatmap--order of annotations will be order shown in heatmap from inside to out
set_annot_samps(c("Connectivity","Animal","State"))
###set up annotation colors, names should match the colnames of sample annotations, values should match levels of columns
state.cols <- brewer.pal(6,"Set1"); names(state.cols) <- LETTERS[1:6]
annot_cols <- list('Connectivity'=c("Projecting"="blue","Non-Projecting"="violet","NONE"="grey"),
'Animal'=c("Pig-M1"="#0571b0","Pig-F1"="#ca0020","Pig-M2"="#92c5de","Pig-F2"="#f4a582"),
"State"=c(state.cols))
library(RColorBrewer)
###set up annotation colors, names should match the colnames of sample annotations, values should match levels of columns
state.cols <- brewer.pal(6,"Set1"); names(state.cols) <- LETTERS[1:6]
annot_cols <- list('Connectivity'=c("Projecting"="blue","Non-Projecting"="violet","NONE"="grey"),
'Animal'=c("Pig-M1"="#0571b0","Pig-F1"="#ca0020","Pig-M2"="#92c5de","Pig-F2"="#f4a582"),
"State"=c(state.cols))
###set color annotations
set_annot_cols(annot_cols)
myHeatmap(RAGP_norm, c("Kcn","Cacn","Scn"), exact = F, na.fix = T)
myHeatmap(RAGP_norm, c("Kcn","Cacn","Scn","Hcn"), exact = F, na.fix = T)
myHeatmap(RAGP_norm, c("Kcn","Cacn","Scn","Hcn"), exact = F, na.fix = T, order.by.gene = "Hcn2")
set_scale.range(c(10,20))
myHeatmap(RAGP_rawCt, c("Kcn","Cacn","Scn","Hcn"), exact = F, na.fix = T, is.raw.Ct = T, order.by.gene = "Hcn2")
myHeatmap(RAGP_rawCt, c("Kcn","Cacn","Scn","Hcn"), exact = F, na.fix = T, is.raw.Ct = T, order.by.gene = "Hcn2", clust.rows = F)
set_scale.range(c(-1,1))
myHeatmap(RAGP_norm, c("Kcn","Cacn","Scn","Hcn"), exact = F, na.fix = T, is.raw.Ct = F, order.by.gene = "Hcn2", clust.rows = F)
myHeatmap(RAGP_norm, c("Kcn","Cacn","Scn","Hcn"), exact = F, na.fix = T, is.raw.Ct = F, order.by.gene = "Kcnab1", clust.rows = F)
myHeatmap(RAGP_norm)
FB <- subsetSamples(RAGP_norm, "Connectivity", take.out = "Projecting")
myHeatmap(FB)
myHeatmap(FB, clust.cols = 6)
myHeatmap(FB, col.groups = 6)
myHeatmap(FB, col.groups = 7)
myHeatmap(FB, col.groups = 10)
myHeatmapByAnnotation(RAGP_norm, c("Kcn","Cacn","Scn","Hcn"), exact = F, na.fix = T, is.raw.Ct = F, order.by.gene = "Kcnab1", clust.rows = F, groupings = "State")
myPCA(RAGP_norm, color.by = "State")
ions <- subsetGenes(RAGP_norm, list= c("Kcn","Hcn","Cacn","Scn"),exact = F)
myPCA(ions, color.by = "State")
myPCA(ions, to.pca = "genes")
myPCA(ions, to.pca = "genes") + geom_text("Gene")
myPCA(ions, to.pca = "genes") + geom_text(aes(label=Gene))
myPCA(ions, to.pca = "genes") + geom_text(aes(label=gene))
install.packages("shiny")
install.packages("shinydashboard")
install.packages(dashboardthemes)
install.packages("dashboardthemes")
install.packages("plotly")
library(dataVisEasy)
?colorRamp
?install.packages
?scatterGenes
