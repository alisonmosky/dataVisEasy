library(dataVisEasy)
library(dataVisEasy)
?`dataVisEasy-package`
library(dataVisEasy)
?`dataVisEasy-package`
library(dataVisEasy)
library(dataVisEasy)
?`dataVisEasy-package`
library(dataVisEasy)
library(dataVisEasy)
library(dataVisEasy)
library(dataVisEasy)
library(dataVisEasy)
library(dataVisEasy)
library(dataVisEasy)
library(dataVisEasy)
library(dataVisEasy)
library(dataVisEasy)
library(dataVisEasy)
library(dataVisEasy)
library(dataVisEasy)
?assign
library(dataVisEasy)
library(dataVisEasy)
?dont.lockBindings
library(dataVisEasy)
library(dataVisEasy)
library(dataVisEasy)
library(dataVisEasy)
library(dataVisEasy)
library(dataVisEasy)
library(dataVisEasy)
library(dataVisEasy)
library(dataVisEasy)
library(dataVisEasy)
library(dataVisEasy)
library(dataVisEasy)
library(dataVisEasy)
library(dataVisEasy)
library(dataVisEasy)
library(dataVisEasy)
library(dataVisEasy)
library(dataVisEasy)
library(dataVisEasy)
common.norm <- as.matrix(read.table("Demo_Pig_Normalized_trimmed.txt", sep="\t", header=T));colnames(common.norm) <- gsub("\\.","-",colnames(common.norm))
setwd("D:/Dropbox (SBG)/SHR-Work/Alison-DataVis-Package")
common.norm <- as.matrix(read.table("Demo_Pig_Normalized_trimmed.txt", sep="\t", header=T));colnames(common.norm) <- gsub("\\.","-",colnames(common.norm))
all.raw <- as.matrix(read.table("Demo_Pig_all_raw.txt", sep="\t", header=T));colnames(all.raw) <- gsub("\\.","-",colnames(all.raw))
all.annots <- read.table("Demo_Pig_Annotations.txt", sep="\t", header=T, stringsAsFactors = T) ;rownames(all.annots) <- gsub("\\.","-",rownames(all.annots))
initiate_params(parameters)
###make sure annotations are in the right order, rownames of annotations should match colnames (samples) of data, must be factors
annotations <- all.annots[all.annots$Sample_ID %in% colnames(all.raw),]
###set annotations
set_annotations(annotations)
###set sample annotations to be colored in heatmap
set_annot_samps(c("Cell_Type","Animal","State"))
###set up annotation colors, names should match the colnames of sample annotations, values should match levels of columns
state.cols <- brewer.pal(6,"Set1"); names(state.cols) <- LETTERS[1:6]
annot_cols <- list('Cell_Type'=c("FB"="blue","CV"="violet","NONE"="grey"),
'Animal'=c("PR1534"="#0571b0","PR1643"="#ca0020","PR1705"="#92c5de","PR1729"="#f4a582"),
"State"=c(state.cols))
###set color annotations
set_annot_cols(annot_cols)
assessScale(common.norm)
set_scale.range(c(-2,2))
assessScale(common.norm)
set_scale.range(c(-1,1))
data <- common.norm
myPCA(data, color.by = "Animal")
goi <- c("Th","Chat","Npy","PGP9.5","Gal")
reportGenes(data, goi)
correlateGenes(data)  ##will give histogram of all correlations, allows you to see distribution
highcors <- correlateGenes(data, limits= c(-0.6, 0.95))  ##will return dataframe giving the gene pair and their correlations for those outside the limits specified
head(highcors)
####find correlations to gene of interest
goi <- "Gal"
corrs2Gene(data,goi)   ##will return histogram of correlations to gene of interest
lims <- c(-0.3,0.3)   ##pick limits based on what you want to see in heatmap, will return genes with negative correlation
corrs2Gene(data,"Gal", limits=lims)  ##otherwise wrapper for myHeatmap
myHeatmap(data)
myHeatmapByAnnotation(data, groupings = "Cell_Type")
myHeatmapByAnnotation(data, groupings = "Animal")
myHeatmapByAnnotation(data, groupings = "State")
myHeatmapByAnnotation(data, groupings = "Sex")
###separate by multiple annotations
myHeatmapByAnnotation(data, groupings = c("Cell_Type","Sex"))
myHeatmapByAnnotation(data, groupings = c("Animal","Cell_Type","State"))
myHeatmapByAnnotation(data, groupings = c("Animal","Cell_Type","State"), groupings.gaps = c(0,1,2))
myHeatmapByAnnotation(data, groupings = c("Animal","Cell_Type","State"), groupings.gaps = c(0,0,2))
##find number of clusters
myHeatmap(data)
myHeatmap(data, row.groups = 3, col.groups = 4)
myHeatmap(data, row.groups = 3, col.groups = 4, gap.width = 3)
myHeatmapByAnnotation(data, groupings = "State", row.groups = 7)
###change gaps, only view a certain number of genes, na.fix=T sets NAs equal to the lowest value to aid in clustering
myHeatmapByAnnotation(data, c("Th","Chat","Dbh","Npy","Chrm1","Chrna7","Chat","Gal","Galr1"), groupings = "State", gap.width = 3, na.fix = T)
###for any list
list <- c("Th","Gal","Sst","Dbh","Npy","Npy2r","Adra","Adrb","Chrm")
myHeatmap(data, list)
myHeatmap(data, list, exact = F)
###lets say raj wants you to put more space in between the groups#####
p <- myHeatmapByAnnotation(data, groupings = "State", row.groups=7, show.colnames = T)
pmat <- ExtractMatrix(data, p)
pgaps <- extractGaps(data, p, extractRows = T, extractCols = F, num_Rows = 7)
myHeatmapByAnnotation(pmat, groupings = "State", clust.rows = F, gaps.row.spec = pgaps, gap.width = 3)
###or you want to extract the clusters####
genemods <- extractClusters(data, p, extractGenes = TRUE, extractSamples = F, num_Gene.groups = 7, GeneGroup_Name = "GeneMods")
set_annotations.genes(genemods)
set_annot_genes("GeneMods")
genemod.cols <- brewer.pal(7,"Set3"); names(genemod.cols) <- levels(genemods$GeneMods)
update_annot_cols("GeneMods",c(genemod.cols))
myHeatmapByAnnotation(data, groupings = "State", groupings.genes = "GeneMods")
myHeatmapByAnnotation(data, c("Th","Dbh","Chat","Npy","Gal","Sst"), exact=F, groupings = F, groupings.genes = "GeneMods")
scatterGenes(data, "Th","Chat")
scatterGenes(data, "Th","Chat", color.by = "Cell_Type")
scatterGenes(data, "Th","Chat", color.by = "Chat")
plot <- scatterGenes(data, "Th","Chat", color.by = "Npy")
plot + theme(axis.text = element_text(size=10))
list <- c("Th","Dbh","Npy","PGP9.5","NeuN", "Chat")
beeswarmGenes(data, list)
beeswarmGenes(data, list, groupby.x = "Sex")
##color by something, options
beeswarmGenes(data, list, color.by = "Animal")
beeswarmGenes(data, list, color.by = "Animal", groupby.x = F)
beeswarmGenes(data, list, color.by = "Animal", groupby.x = "Sex")
beeswarmGenes(data, list, color.by = "Animal", groupby.x = "Sex", facet.wrap = T)
beeswarmGenes(data, list, color.by = "Animal", groupby.x = "Sex", facet.wrap = T) + geom_boxplot()
beeswarmGenes(data, list, color.by = "Animal", groupby.x = "Sex", facet.wrap = T) + geom_boxplot(aes(fill=Animal))
beeswarmGenes(data, list, color.by = "Animal", groupby.x = "Sex", facet.wrap = T) + geom_boxplot(aes(fill=Sex))
list <- c("Chat","Th","Npy","PGP9.5")
DensityGenes(data,list)
DensityGenes(data,list, "Animal")
DensityGenes(data,list, legend.position = "none")
DensityGenes(data,list, "Animal")
DensityGenes(data,list, "Animal") + ggtitle("My Density Plots")
dat2 <- subsetSamples(data, group = "Cell_Type", take.out = c("CV", "FB"))
DensityGenes(dat2,list, "Cell_Type")
aov.results <- AOV1way(data, "Cell_Type")
head(aov.results$AOV.Results)
head(aov.results$Tukey.pVals)
myHeatmapByAnnotation(data, aov.results$Sig.Genes, groupings= "Cell_Type")
##2 Way ANOVA
aov2.results <- AOV2way(data, "Cell_Type", "Sex")
####Volcano Plot
volcano(data, "Sex")
volcano(data, "Cell_Type", levels = c("CV","FB"))
volcano(data, "Cell_Type", levels = c("CV","FB"), pval.cut = 0.1, FC.cut = 1.5,
upreg.color = "yellow", downreg.color = "blue", nosig.color = "gray90")
###add things to ggplot object
volcano(data, "Cell_Type", levels = c("CV","FB")) + geom_text(aes(label=Gene),  nudge_x = 0.1, nudge_y = -.1)
##add lines
horiz.lines <- c(0.05)
vert.lines <- c(2,3)
volcano(data, "Cell_Type", levels = c("CV","FB")) + geom_hline(yintercept = c(-log10(horiz.lines))) + geom_vline(xintercept = c(log2(vert.lines), -log2(vert.lines)))
##get output
volcano.summary <- volcano(data, "Cell_Type", levels = c("CV","FB"), return.summary = TRUE)
matches <- PTM(data, match.template = "State", set.high="A")
myHeatmapByAnnotation(data, matches, groupings = "State")
library(dataVisEasy)
setwd("D:/Dropbox (SBG)/SHR-Work/Alison-DataVis-Package")
library(dataVisEasy)
common.norm <- as.matrix(read.table("Demo_Pig_Normalized_trimmed.txt", sep="\t", header=T));colnames(common.norm) <- gsub("\\.","-",colnames(common.norm))
all.raw <- as.matrix(read.table("Demo_Pig_all_raw.txt", sep="\t", header=T));colnames(all.raw) <- gsub("\\.","-",colnames(all.raw))
all.annots <- read.table("Demo_Pig_Annotations.txt", sep="\t", header=T, stringsAsFactors = T) ;rownames(all.annots) <- gsub("\\.","-",rownames(all.annots))
initiate_params(parameters)
###make sure annotations are in the right order, rownames of annotations should match colnames (samples) of data, must be factors
annotations <- all.annots[all.annots$Sample_ID %in% colnames(all.raw),]
head(annotations)
###set annotations
set_annotations(annotations)
###set sample annotations to be colored in heatmap
set_annot_samps(c("Cell_Type","Animal","State"))
###set up annotation colors, names should match the colnames of sample annotations, values should match levels of columns
state.cols <- brewer.pal(6,"Set1"); names(state.cols) <- LETTERS[1:6]
annot_cols <- list('Cell_Type'=c("FB"="blue","CV"="violet","NONE"="grey"),
'Animal'=c("PR1534"="#0571b0","PR1643"="#ca0020","PR1705"="#92c5de","PR1729"="#f4a582"),
"State"=c(state.cols))
###set color annotations
set_annot_cols(annot_cols)
assessScale(common.norm)
set_scale.range(c(-2,2))
assessScale(common.norm)
set_scale.range(c(-1,1))
data <- common.norm
myPCA(data, color.by = "Animal")
rm(list=ls())
