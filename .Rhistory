NTS.Q <- read.table("D://Dropbox (SBG)/SHR-Work/NTS-Analysis/Exp_analysis/DESEQ/Results-filtered-deseq/NTS_Q-Value_Adjusted_rld3.5_cut_All_Contrasts.txt", sep = "\t", header = T);rownames(NTS.Q) <- gsub("\\.","-", rownames(NTS.Q))
NTS <- read.table(paste0(prefix,"/Dropbox (SBG)/SHR-Work/NTS-Analysis/Exp_analysis/DESEQ/Results-filtered-deseq/NTS_rld_table.txt"), sep="\t", header=T); colnames(NTS) <- gsub("\\.","-", colnames(NTS)); rownames(NTS) <- gsub("\\.","-", rownames(NTS))
NTS.Z.sep <- read.table("D://Dropbox (SBG)/SHR-Work/NTS-Analysis/Exp_analysis/Stacking/NTS_Zscore_Strain_Separate.txt", sep="\t", header=T); colnames(NTS.Z.sep) <- gsub("\\.","-", colnames(NTS.Z.sep)); rownames(NTS.Z.sep) <- gsub("\\.","-", rownames(NTS.Z.sep))
NTS.Z.tog <- read.table("D://Dropbox (SBG)/SHR-Work/NTS-Analysis/Exp_analysis/Stacking/NTS_Zscore_together.txt", sep="\t", header=T); colnames(NTS.Z.tog) <- gsub("\\.","-", colnames(NTS.Z.tog)); rownames(NTS.Z.tog) <- gsub("\\.","-", rownames(NTS.Z.tog))
NTS.stack.sep <- read.table("D://Dropbox (SBG)/SHR-Work/NTS-Analysis/Exp_analysis/Stacking/NTS_Zscore_Strain_Separate_Comb.txt", sep="\t", header=T); colnames(NTS.stack.sep) <- gsub("\\.","-", colnames(NTS.stack.sep)); rownames(NTS.stack.sep) <- gsub("\\.","-", rownames(NTS.stack.sep))
NTS.stack.tog <- read.table("D://Dropbox (SBG)/SHR-Work/NTS-Analysis/Exp_analysis/Stacking/NTS_Zscore_together_Comb.txt", sep="\t", header=T); colnames(NTS.stack.tog) <- gsub("\\.","-", colnames(NTS.stack.tog)); rownames(NTS.stack.tog) <- gsub("\\.","-", rownames(NTS.stack.tog))
#NTS.annots <- read.csv("D://Dropbox (SBG)/SHR-Work/NTS-Analysis/Exp_analysis/NTS_Sample_Annotations.csv", row.names = 1); NTS.annots$Age <- gsub("8","08",NTS.annots$Age) %>% as.factor(); NTS.annots$Strain <- factor(NTS.annots$Strain, levels=c("W","S","Both"))
}
NTS <- read.table(paste0(prefix,"/Dropbox (SBG)/SHR-Work/NTS-Analysis/Exp_analysis/DESEQ/Results-filtered-deseq/NTS_rld_table.txt"), sep="\t", header=T); colnames(NTS) <- gsub("\\.","-", colnames(NTS)); rownames(NTS) <- gsub("\\.","-", rownames(NTS))
RVLM <- read.table(paste0(prefix,"/Dropbox (SBG)/SHR-Work/RVLM-Analysis/Exp_analysis/DESEQ/Results/RVLM_rld_table.txt"), sep="\t", header=T); colnames(RVLM) <- gsub("\\.","-", colnames(RVLM)); rownames(RVLM) <- gsub("\\.","-", rownames(RVLM))
##Import Common Items and set Annotations####
full <- read.table("All_Brainstem_rld_table.txt", sep="\t", header=T); colnames(full) <- gsub("\\.","-", colnames(full))
setwd("C:/Users/axm323/Dropbox (SBG)/SHR-Work/Integration")
##Import Common Items and set Annotations####
full <- read.table("All_Brainstem_rld_table.txt", sep="\t", header=T); colnames(full) <- gsub("\\.","-", colnames(full))
full.Z <- read.table("All_Brainstem_Zscored_table.txt", sep = "\t", header = T); colnames(full.Z) <- gsub("\\.","-", colnames(full.Z))
all.compact.1.5 <- read.table("D://Dropbox (SBG)/SHR-Work/Integration/All_COMPACT_Assignments_Qval_0.2_FC_1.5.txt", sep="\t", header=T)
all.annots <- read.csv("D://Dropbox (SBG)/SHR-Work/Integration/All_Brainstem_Annotations.csv", row.names = 1); all.annots$Age <- gsub("8","08",all.annots$Age) %>% as.factor(); all.annots$Strain <- factor(all.annots$Strain, levels=c("W","S", "Both"))
all.annots <- read.csv(C://Users/axm323/Dropbox (SBG)/SHR-Work/Integration/All_Brainstem_Annotations.csv", row.names = 1); all.annots$Age <- gsub("8","08",all.annots$Age) %>% as.factor(); all.annots$Strain <- factor(all.annots$Strain, levels=c("W","S", "Both"))
all.annots <- read.csv("C://Users/axm323/Dropbox (SBG)/SHR-Work/Integration/All_Brainstem_Annotations.csv", row.names = 1); all.annots$Age <- gsub("8","08",all.annots$Age) %>% as.factor(); all.annots$Strain <- factor(all.annots$Strain, levels=c("W","S", "Both"))
age.cols.stack <- brewer.pal(5,"Set1"); names(age.cols.stack) <- levels(all.annots$Age)
region.cols <- brewer.pal(3, "Paired"); names(region.cols) <- c("NTS","RVLM","CVLM")
annot_cols.stack <- list('Strain'=c('W'='blue', 'S'='red', 'Both'='purple'), 'Age'=c(age.cols.stack), 'Region'= c(region.cols))
initiate_params(parameters)
set_annotations(all.annots)
set_annot_samps(c("Region","Strain","Age"))
set_annot_cols(annot_cols.stack)
list <- rownames(full)[1:4]
plot.genes.all.regions(full, list, wrap = TRUE)
plot.genes.all.regions(full, list, wrap = FALSE)
plot.genes.all.regions(full, list, wrap = FALSE, flip = T)
plot.genes.all.regions(full, list, compact = F)
plot.genes.all.regions(full, list, compact = T)
plot.genes.all.regions(full, list, compact = T, wrap = T)
plot.genes.all.regions(full, list, compact = T, wrap = F)
plot.genes.all.regions(full, list, compact = F, wrap = F)
plot.genes.all.regions(full, list)
plot.genes.all.regions(full, list, wrap = FALSE)
plot.genes.all.regions(full, list, wrap = TRUE, compact = FALSE)
plot.genes.all.regions(full, list, wrap = TRUE, compact = TRUE)
plot.genes.all.regions(full, list, wrap = TRUE, compact = TRUE) + theme(plot.title = element_text(size = 10))
plot.genes.all.regions(full, list, wrap = TRUE, compact = TRUE) + theme(axis.title = element_text(size = 10))
plot.genes.all.regions(full, list, wrap = TRUE, compact = TRUE, flip = T) + theme(axis.title = element_text(size = 10))
plot.genes.all.regions(full, list, wrap = T, compact = T, flip = T) + theme(axis.title = element_text(size = 10))
plot.genes.all.regions(full, list, wrap = F, compact = T)
plot.genes.all.regions(full, list, wrap = T, compact = T)
plot.genes.all.regions(full, list, wrap = F, compact = T, flip = T)
plot.genes.all.regions(full, list, wrap = T, compact = T, flip = T)
plot.genes.all.regions(full, list, wrap = F, compact = T)
plot.genes.all.regions(full, list, wrap = T, compact = T, scales = "fixed")
plot.genes.all.regions(full, list, wrap = T, compact = T, scales = "fixed_y")
plot.genes.all.regions(full, list, wrap = T, compact = T, scales = "free_y")
plot.genes.all.regions(full, list, wrap = T, compact = T, scales = "free")
plot.genes.all.regions(full, list, wrap = T, compact = T, scales = "free_y")
plot.genes.all.regions(full, c("Kcnab2","Kcna2","Kcne5","Kcnip2","Kcnj14"), wrap = T, compact = T, scales = "free_y")
plot.genes.all.regions(full,"Kcnip", exact = F, wrap = T, compact = T, scales = "free_y")
Project_Compact(rownames(full), "NTS")
prefix
Project_Compact <- function(
list,
ROI,
type = "Strain", ##can also be time
q.cut = 0.2,
FC.cut = 1.5,
pattern.freq.min = 1,
show.sums = TRUE,
reduce.mat = TRUE,
cell.number.size = 0.5,
exact = TRUE
){
all.compact <- read.table(paste0(prefix, "Dropbox (SBG)/SHR-Work/Integration/All_COMPACT_Assignments_Qval_", q.cut,"_FC_", FC.cut, ".txt"), sep = "\t", header = T)
if (exact == TRUE) {
if (length(grep("_", list)) == length(list)) {
subclusts <- all.compact[which(rownames(all.compact) %in% list),]#; rownames(dat.to.plot) <- colsplit(rownames(dat.to.plot),"_",c("ENS","Gene"))$Gene
}else{
subclusts <- all.compact[which(colsplit(rownames(all.compact),"_",c("ENS","Gene"))$Gene %in% list),];#rownames(dat.to.plot) <- colsplit(rownames(dat.to.plot),"_",c("ENS","Gene"))$Gene
}
}else{
subclusts <- all.compact[grep(paste(list, collapse="|"),rownames(all.compact)),]; #rownames(dat.to.plot) <- colsplit(rownames(dat.to.plot),"_",c("ENS","Gene"))$Gene
}
##make a table of all availabel combinations and the frequency at which they appear--only need to run once
SHR.perms.all.strain <- permutations(3,5,v=-1:1, repeats.allowed = TRUE); SHR.perms.all.time <- permutations(3,4,v=-1:1, repeats.allowed = TRUE);WKY.perms.all <- permutations(3,4,v=-1:1, repeats.allowed = TRUE)
#subclusts <- all.compact.1.5[which(rownames(all.compact.1.5) %in% list),]
if (ROI == "NTS") {
##get frequency of permutations and can filter to make it smaller in NTS
shr.freq.strain <- read.table(paste0(prefix, "Dropbox (SBG)/SHR-Work/NTS-Analysis/COMPACT/COMPACT-STRAIN-DIFF/qvalue_", q.cut,"-FC", FC.cut,"/patterns.counts.shr.txt"), sep="\t", header=T)
SHR.perms.strain <- SHR.perms.all.strain[-c(which(shr.freq.strain$shr.count < pattern.freq.min)),]
shr.freq.time <- read.table(paste0(prefix, "Dropbox (SBG)/SHR-Work/NTS-Analysis/COMPACT/COMPACT-TIME/qvalue_", q.cut,"-FC", FC.cut,"/patterns.counts.shr.txt"), sep="\t", header=T)
SHR.perms.time <- SHR.perms.all.time[-c(which(shr.freq.time$shr.count < pattern.freq.min)),]
wky.freq <- read.table(paste0(prefix, "Dropbox (SBG)/SHR-Work/NTS-Analysis/COMPACT/COMPACT-STRAIN-DIFF/qvalue_", q.cut, "-FC", FC.cut, "/patterns.counts.wky.txt"), sep="\t", header=T)
WKY.perms <- WKY.perms.all[-c(which(wky.freq$wky.count < pattern.freq.min)),]
all.combs.strain <- tidyr::crossing(A=unique(paste0("w",WKY.perms[,1], WKY.perms[,2], WKY.perms[,3], WKY.perms[,4])), B=unique(paste0("s",SHR.perms.strain[,1], SHR.perms.strain[,2], SHR.perms.strain[,3], SHR.perms.strain[,4], SHR.perms.strain[,5]))); all.combs.strain <- paste0(all.combs.strain$A,"-",all.combs.strain$B)
all.combs.time <- tidyr::crossing(A=unique(paste0("w",WKY.perms[,1], WKY.perms[,2], WKY.perms[,3], WKY.perms[,4])), B=unique(paste0("s",SHR.perms.time[,1], SHR.perms.time[,2], SHR.perms.time[,3], SHR.perms.time[,4]))); all.combs.time <- paste0(all.combs.time$A,"-",all.combs.time$B)
##setup NTS matrix##
tab.strain <- as.data.frame(table(paste(subclusts$NTS.Strain[which(!is.na(subclusts$NTS.Strain))])));# tab.strain <- tab.strain[-which(tab.strain$Var1=="NA"),]
all.combs.present.strain <- tab.strain[match(all.combs.strain, as.character(tab.strain$Var1)),];
freqmat.strain <- matrix(all.combs.present.strain$Freq,nrow=nrow(WKY.perms), byrow=TRUE); freqmat.strain[is.na(freqmat.strain)] <- 0; rownames(freqmat.strain) <- paste0("w",WKY.perms[,1], WKY.perms[,2], WKY.perms[,3],WKY.perms[,4]); colnames(freqmat.strain) <- paste0("s",SHR.perms.strain[,1], SHR.perms.strain[,2], SHR.perms.strain[,3], SHR.perms.strain[,4], SHR.perms.strain[,5])
tab.time <- as.data.frame(table(paste(subclusts$NTS.Time[which(!is.na(subclusts$NTS.Time))])))
all.combs.present.time <- tab.time[match(all.combs.time, as.character(tab.time$Var1)),];
freqmat.time <- matrix(all.combs.present.time$Freq,nrow=nrow(WKY.perms), byrow=TRUE); freqmat.time[is.na(freqmat.time)] <- 0; rownames(freqmat.time) <- paste0("w",WKY.perms[,1], WKY.perms[,2], WKY.perms[,3],WKY.perms[,4]); colnames(freqmat.time) <- paste0("s",SHR.perms.time[,1], SHR.perms.time[,2], SHR.perms.time[,3], SHR.perms.time[,4])
}
if (ROI == "RVLM") {
##get frequency of permutations and can filter to make it smaller in RVLM
shr.freq.strain <- read.table(paste0(prefix, "Dropbox (SBG)/SHR-Work/RVLM-Analysis/COMPACT/COMPACT-STRAIN-DIFF/qvalue_", q.cut, "-FC", FC.cut, "/patterns.counts.shr.txt"), sep="\t", header=T)
SHR.perms.strain <- SHR.perms.all.strain[-c(which(shr.freq.strain$shr.count < pattern.freq.min)),]
shr.freq.time <- read.table(paste0(prefix, "Dropbox (SBG)/SHR-Work/RVLM-Analysis/COMPACT/COMPACT-TIME/qvalue_", q.cut, "-FC", FC.cut, "/patterns.counts.shr.txt"), sep="\t", header=T)
SHR.perms.time <- SHR.perms.all.time[-c(which(shr.freq.time$shr.count < pattern.freq.min)),]
wky.freq <- read.table(paste0(prefix, "Dropbox (SBG)/SHR-Work/RVLM-Analysis/COMPACT/COMPACT-STRAIN-DIFF/qvalue_", q.cut, "-FC", FC.cut, "/patterns.counts.wky.txt"), sep="\t", header=T)
WKY.perms <- WKY.perms.all[-c(which(wky.freq$wky.count < pattern.freq.min)),]
all.combs.strain <- tidyr::crossing(A=unique(paste0("w",WKY.perms[,1], WKY.perms[,2], WKY.perms[,3], WKY.perms[,4])), B=unique(paste0("s",SHR.perms.strain[,1], SHR.perms.strain[,2], SHR.perms.strain[,3], SHR.perms.strain[,4], SHR.perms.strain[,5]))); all.combs.strain <- paste0(all.combs.strain$A,"-",all.combs.strain$B)
all.combs.time <- tidyr::crossing(A=unique(paste0("w",WKY.perms[,1], WKY.perms[,2], WKY.perms[,3], WKY.perms[,4])), B=unique(paste0("s",SHR.perms.time[,1], SHR.perms.time[,2], SHR.perms.time[,3], SHR.perms.time[,4]))); all.combs.time <- paste0(all.combs.time$A,"-",all.combs.time$B)
##setup RVLM matrix##
tab.strain <- as.data.frame(table(paste(subclusts$RVLM.Strain[which(!is.na(subclusts$RVLM.Strain))]))); #tab.strain <- tab.strain[-which(tab.strain$Var1=="NA"),]
all.combs.present.strain <- tab.strain[match(all.combs.strain, as.character(tab.strain$Var1)),];
freqmat.strain <- matrix(all.combs.present.strain$Freq,nrow=nrow(WKY.perms), byrow=TRUE); freqmat.strain[is.na(freqmat.strain)] <- 0; rownames(freqmat.strain) <- paste0("w",WKY.perms[,1], WKY.perms[,2], WKY.perms[,3],WKY.perms[,4]); colnames(freqmat.strain) <- paste0("s",SHR.perms.strain[,1], SHR.perms.strain[,2], SHR.perms.strain[,3], SHR.perms.strain[,4], SHR.perms.strain[,5])
tab.time <- as.data.frame(table(paste(subclusts$RVLM.Time[which(!is.na(subclusts$RVLM.Time))]))); #tab.time <- tab.time[-which(tab.time$Var1=="NA"),]
all.combs.present.time <- tab.time[match(all.combs.time, as.character(tab.time$Var1)),];
freqmat.time <- matrix(all.combs.present.time$Freq,nrow=nrow(WKY.perms), byrow=TRUE); freqmat.time[is.na(freqmat.time)] <- 0; rownames(freqmat.time) <- paste0("w",WKY.perms[,1], WKY.perms[,2], WKY.perms[,3],WKY.perms[,4]); colnames(freqmat.time) <- paste0("s",SHR.perms.time[,1], SHR.perms.time[,2], SHR.perms.time[,3], SHR.perms.time[,4])
}
if (ROI == "CVLM") {
##get frequency of permutations and can filter to make it smaller in CVLM
shr.freq.strain <- read.table(paste0(prefix, "Dropbox (SBG)/SHR-Work/CVLM-Analysis/COMPACT/COMPACT-STRAIN-DIFF/qvalue_", q.cut, "-FC", FC.cut, "/patterns.counts.shr.txt"), sep="\t", header=T)
SHR.perms.strain <- SHR.perms.all.strain[-c(which(shr.freq.strain$shr.count < pattern.freq.min)),]
shr.freq.time <- read.table(paste0(prefix, "Dropbox (SBG)/SHR-Work/CVLM-Analysis/COMPACT/COMPACT-TIME/qvalue_", q.cut, "-FC", FC.cut, "/patterns.counts.shr.txt"), sep="\t", header=T)
SHR.perms.time <- SHR.perms.all.time[-c(which(shr.freq.time$shr.count < pattern.freq.min)),]
wky.freq <- read.table(paste0(prefix, "Dropbox (SBG)/SHR-Work/CVLM-Analysis/COMPACT/COMPACT-STRAIN-DIFF/qvalue_", q.cut, "-FC", FC.cut, "/patterns.counts.wky.txt"), sep="\t", header=T)
WKY.perms <- WKY.perms.all[-c(which(wky.freq$wky.count < pattern.freq.min)),]
all.combs.strain <- tidyr::crossing(A=unique(paste0("w",WKY.perms[,1], WKY.perms[,2], WKY.perms[,3], WKY.perms[,4])), B=unique(paste0("s",SHR.perms.strain[,1], SHR.perms.strain[,2], SHR.perms.strain[,3], SHR.perms.strain[,4], SHR.perms.strain[,5]))); all.combs.strain <- paste0(all.combs.strain$A,"-",all.combs.strain$B)
all.combs.time <- tidyr::crossing(A=unique(paste0("w",WKY.perms[,1], WKY.perms[,2], WKY.perms[,3], WKY.perms[,4])), B=unique(paste0("s",SHR.perms.time[,1], SHR.perms.time[,2], SHR.perms.time[,3], SHR.perms.time[,4]))); all.combs.time <- paste0(all.combs.time$A,"-",all.combs.time$B)
##setup CVLM matrix##
tab.strain <- as.data.frame(table(paste(subclusts$CVLM.Strain[which(!is.na(subclusts$CVLM.Strain))])))
all.combs.present.strain <- tab.strain[match(all.combs.strain, as.character(tab.strain$Var1)),];
freqmat.strain <- matrix(all.combs.present.strain$Freq,nrow=nrow(WKY.perms), byrow=TRUE); freqmat.strain[is.na(freqmat.strain)] <- 0; rownames(freqmat.strain) <- paste0("w",WKY.perms[,1], WKY.perms[,2], WKY.perms[,3],WKY.perms[,4]); colnames(freqmat.strain) <- paste0("s",SHR.perms.strain[,1], SHR.perms.strain[,2], SHR.perms.strain[,3], SHR.perms.strain[,4], SHR.perms.strain[,5])
tab.time <- as.data.frame(table(paste(subclusts$CVLM.Time[which(!is.na(subclusts$CVLM.Time))])))
all.combs.present.time <- tab.time[match(all.combs.time, as.character(tab.time$Var1)),];
freqmat.time <- matrix(all.combs.present.time$Freq,nrow=nrow(WKY.perms), byrow=TRUE); freqmat.time[is.na(freqmat.time)] <- 0; rownames(freqmat.time) <- paste0("w",WKY.perms[,1], WKY.perms[,2], WKY.perms[,3],WKY.perms[,4]); colnames(freqmat.time) <- paste0("s",SHR.perms.time[,1], SHR.perms.time[,2], SHR.perms.time[,3], SHR.perms.time[,4])
}
###set up matrix to be printed with correct colors and aesthetics
if (tolower(type) == "strain") {
freqmat <- freqmat.strain
SHR.perms <- SHR.perms.strain
WKY.perms <- WKY.perms
freqmat[which(freqmat==0)] <- NA
freqmat <- rbind(t(mapvalues(SHR.perms, from=c(-1,0,1), to=c(-3,-2,-1))), freqmat);
freqmat <- cbind(rbind(matrix(0,nrow=5,ncol=4), mapvalues(WKY.perms, from=c(-1,0,1), to=c(-3,-2,-1))),freqmat)
}
if (tolower(type) == "time") {
freqmat <- freqmat.time
SHR.perms <- SHR.perms.time
WKY.perms <- WKY.perms
freqmat[which(freqmat==0)] <- NA
freqmat <- rbind(t(mapvalues(SHR.perms, from=c(-1,0,1), to=c(-3,-2,-1))), freqmat);
freqmat <- cbind(rbind(matrix(0,nrow=4,ncol=4), mapvalues(WKY.perms, from=c(-1,0,1), to=c(-3,-2,-1))),freqmat)
}
##switch the order.......
##switch bottom of WKY
freqmat <- rbind(freqmat[1:which(rownames(freqmat)=="w0000"),], freqmat[nrow(freqmat):(which(rownames(freqmat)=="w0000")+1),])
if (tolower(type) == "time") {
freqmat <- cbind(freqmat[,1:which(colnames(freqmat)=="s0000")], freqmat[,ncol(freqmat):(which(colnames(freqmat)=="s0000")+1)])}
if (tolower(type) == "strain") {
freqmat <- cbind(freqmat[,1:which(colnames(freqmat)=="s00000")], freqmat[,ncol(freqmat):(which(colnames(freqmat)=="s00000")+1)])}
###to show sums
sums.row <- rowSums(freqmat[,5:ncol(freqmat)], na.rm = T)
if (tolower(type) == "strain") {sums.col <- colSums(freqmat[6:nrow(freqmat),], na.rm = T)
sums.row[which(rownames(freqmat) == "w0000")] <- sums.row[which(rownames(freqmat) == "w0000")] - freqmat[which(rownames(freqmat) == "w0000"), which(colnames(freqmat) == "s00000")]
sums.col[which(colnames(freqmat) == "s00000")] <- sums.col[which(colnames(freqmat) == "s00000")] - freqmat[which(rownames(freqmat) == "w0000"), which(colnames(freqmat) == "s00000")]
total.sum <- sum(freqmat[6:nrow(freqmat),5:ncol(freqmat)], na.rm=T)}
if (tolower(type) == "time") {sums.col <- colSums(freqmat[5:nrow(freqmat),], na.rm = T)
sums.row[which(rownames(freqmat) == "w0000")] <- sums.row[which(rownames(freqmat) == "w0000")] - freqmat[which(rownames(freqmat) == "w0000"), which(colnames(freqmat) == "s0000")]
sums.col[which(colnames(freqmat) == "s0000")] <- sums.col[which(colnames(freqmat) == "s0000")] - freqmat[which(rownames(freqmat) == "w0000"), which(colnames(freqmat) == "s0000")]
total.sum <- sum(freqmat[5:nrow(freqmat),5:ncol(freqmat)], na.rm=T)}
if (show.sums==TRUE) {
freqmat <- rbind(freqmat,sums.col)
freqmat <- cbind(freqmat, c(sums.row,total.sum))
}
if(reduce.mat == TRUE){  ##options because if which(sums == 0) is 0 then it wont return anything...
if ((sum(sums.row == 0)!= 0) & (sum(sums.col == 0) != 0) ) {freqmat <- freqmat[-which(sums.row==0),-which(sums.col==0)]}
if ((sum(sums.row == 0)== 0) & (sum(sums.col == 0) != 0) ) {freqmat <- freqmat[,-which(sums.col==0)]}
if ((sum(sums.row == 0)!= 0) & (sum(sums.col == 0) == 0) ) {freqmat <- freqmat[-which(sums.row==0),]}
if ((sum(sums.row == 0)== 0) & (sum(sums.col == 0) == 0) ) {freqmat <- freqmat}
}
##cellcolors
##need to do this one by one....
cellcolors <- unlist(freqmat);
#cellcolors[,grep("s0000", colnames(freqmat))] <- "grey90";
#cellcolors[which(freqmat == 0)] <- "white"
cellcolors[which(freqmat >0 & freqmat >=1)] <- "white"
if (tolower(type) == "strain") {cellcolors[,which(colnames(freqmat) == "s00000")] <- "grey90"}else {cellcolors[,which(colnames(freqmat) == "s0000")] <- "grey90" }
cellcolors[which(rownames(freqmat)=="w0000"),] <- "grey90"
cellcolors[which(freqmat == -3)] <- "royalblue3"; cellcolors[which(freqmat == -1)] <- "gold"; cellcolors[which(freqmat == -2)] <- "grey85"
if(show.sums==TRUE){cellcolors[nrow(freqmat),] <- "white"; cellcolors[,ncol(freqmat)] <- "white"}
cellcolors[which(freqmat < 5 & freqmat > 1)] <- "lavenderblush"
cellcolors[which(freqmat <= 10 & freqmat >= 5)] <- "pink"
cellcolors[which(freqmat > 10 & freqmat <= 25)] <- "hotpink"
cellcolors[which(freqmat > 25 & freqmat < 1000)] <- "red"
#cellcolors[which(rownames(freqmat)=="w0000"),grep("s0000",colnames(freqmat)) ] <- "black"
if (tolower(type) == "strain") {cellcolors[which(rownames(freqmat)=="w0000"),which(colnames(freqmat) == "s00000")] <- "black"}else {cellcolors[which(rownames(freqmat)=="w0000"),which(colnames(freqmat) == "s0000")] <- "black" }
if (show.sums == TRUE) {
if (tolower(type) == "strain") {cellcolors[which(rownames(freqmat)=="w0000"),ncol(freqmat)] <- "black"; cellcolors[nrow(freqmat),which(colnames(freqmat)=="s00000")] <- "black"}else {cellcolors[which(rownames(freqmat)=="w0000"),ncol(freqmat)] <- "black" ; cellcolors[nrow(freqmat),which(colnames(freqmat) == "s0000")] <- "black" }
cellcolors[nrow(freqmat), ncol(freqmat)] <- "black"
}
##textcolors
textcolors <- unlist(freqmat)
textcolors[] <- "white"
#textcolors[6:nrow(freqmat),grep("s0000",colnames(freqmat))] <- "grey90";
if (tolower(type) == "strain") {textcolors[6:nrow(freqmat),which(colnames(freqmat) == "s00000")] <- "grey90"}else {textcolors[5:nrow(freqmat),which(colnames(freqmat) == "s0000")] <- "grey90" }
textcolors[which(rownames(freqmat)=="w0000"),5:ncol(freqmat)] <- "grey90"
textcolors[which(freqmat == -3)] <- "royalblue3"; textcolors[which(freqmat == -1)] <- "gold";  textcolors[which(freqmat == -2)] <- "grey85"
textcolors[which(freqmat > 0 & freqmat < 1000)] <- "black"
#textcolors[which(rownames(freqmat)=="w0000"),grep("s0000",colnames(freqmat)) ] <- "white"
if (tolower(type) == "strain") {textcolors[which(rownames(freqmat)=="w0000"),which(colnames(freqmat)=="s00000") ] <- "white"}else {textcolors[which(rownames(freqmat)=="w0000"),which(colnames(freqmat)=="s0000") ] <- "white" }
if (show.sums == TRUE) {
if (tolower(type) == "strain") {textcolors[which(rownames(freqmat)=="w0000"),ncol(freqmat)] <- "white"; textcolors[nrow(freqmat),which(colnames(freqmat)=="s00000")] <- "white"}else {textcolors[which(rownames(freqmat)=="w0000"),ncol(freqmat)] <- "white" ; textcolors[nrow(freqmat),which(colnames(freqmat) == "s0000")] <- "white" }
textcolors[nrow(freqmat), ncol(freqmat)] <- "white"
}
###set up matrix to be printed with correct colors and aesthetics
plotrix::color2D.matplot(freqmat, cellcolors=cellcolors, show.values = 0.5, axes=FALSE, vcol = textcolors, vcex = cell.number.size, border="white", ylab="WKY Pattern",
xlab=paste(tools::toTitleCase(paste(type)), "COMPACT for", ROI, "Qval", q.cut, "FC", FC.cut));axis(3, at=seq_len(ncol(freqmat))-0.5, labels=colnames(freqmat)); axis(2,at=seq_len(nrow(freqmat))-0.5, labels=(rev(rownames(freqmat))))
}
Project_Compact(rownames(full), "NTS")
Project_Compact(rownames(full), "NTS". pattern.freq.min = 5)
Project_Compact(rownames(full), "NTS", pattern.freq.min = 5)
all.compact.1.5 <- read.table("All_COMPACT_Assignments_Qval_0.2_FC_1.5.txt", sep="\t", header=T)
all.compact.2 <- read.table("All_COMPACT_Assignments_Qval_0.2_FC_2.txt", sep="\t", header=T)
Project_Compact(rownames(full), "NTS", pattern.freq.min = 5, FC.cut = 2)
mylist <- rownames(all.compact.1.5)[which(all.compact.1.5$NTS.Strain == "w-1000-s01000")]
Project_Compact(mylist, "NTS", pattern.freq.min = 5)
Project_Compact(mylist, "NTS", pattern.freq.min = 5, FC.cut = 2)
Project_Compact(mylist, "NTS", pattern.freq.min = 5, FC.cut = 2, show.sums = F)
Project_Compact(mylist, "NTS", pattern.freq.min = 5, "time")
Project_Compact(mylist, "NTS", pattern.freq.min = 5, "time", reduce.mat = F)
Project_Compact(mylist, "NTS", pattern.freq.min = 5, "time", reduce.mat = F, FC.cut = 2)
Project_Compact(c("Kcn","Cacn","Scn","Clc","Gabr","Gri"), exact = F, "NTS", pattern.freq.min = 1)
Project_Compact(mylist, "RVLM", pattern.freq.min = 1)
Project_Compact(mylist, "CVLM", pattern.freq.min = 1)
install.packages("openxlsx")
myPCA(NTS)
myPCA(NTS, color.by = "Age")
colnames(params$annotations)
myPCA(full, color.by = "Region")
myPCA <- function(
data,
to.pca = "samples",
nPcs= 3,
color.by = "blue", ##vetor same length or in annotations, annot_cols
custom.color.vec = FALSE,
PCs.to.plot = c("PC1","PC2"),
legend.position = "right",
main = NULL,
point.size =5,
transparency = 1,
percent.mad =0.5
){
if (to.pca == "samples") {
temp.annotations <- params$annotations
pca <- pcaMethods::pca(t(data), nPcs = nPcs)
pca.scrs <- pcaMethods::scores(pca)
pca.ldgs <- pcaMethods::loadings(pca)
if (color.by %in% rownames(data) | sum(custom.color.vec != FALSE) > 0) {
pca.data <- pca.scrs
if (color.by %in% rownames(data)) {
genedat<- data[which(rownames(data)==color.by),]
cols <- myColorRamp5(params$expression_gradient.colors,genedat, percent.mad = percent.mad)
} else{ cols <- custom.color.vec}
p <- ggplot(pca.data, aes(x=eval(parse(text = PCs.to.plot[1])),y=eval(parse(text = PCs.to.plot[2])),fill=cols))+ geom_point(pch=21,color="black",size=point.size, alpha = transparency)  +
scale_fill_identity() +labs(x=paste(PCs.to.plot[1]), y= paste(PCs.to.plot[2])) + ggtitle(main) +
theme_bw() + theme(panel.grid = element_blank(), plot.title = element_text(hjust=0.5, size=40),
axis.text = element_text(size=25),axis.title = element_text(size=30), legend.position = legend.position)
}else{
if (color.by %in% colnames(temp.annotations)) {
suppressWarnings( if (is.na(temp.annotations) == FALSE) {
if (sum(colnames(data) %notin% rownames(temp.annotations)) != 0 ) {
stop('colnames of input data do not match rownames of annotations, cannot link annotations to data')}
temp.annotations <- temp.annotations[match(colnames(data), rownames(temp.annotations)),, drop = FALSE]
#temp.annotations <- temp.annotations[match(colnames(data), rownames(temp.annotations)),]
pca.data <- data.frame(pca.scrs,temp.annotations)
})
if (color.by %in% names(params$annot_cols)) {
cols <- as.factor(pca.data[,which(colnames(pca.data) == color.by)])
colors <- params$annot_cols[[which(names(params$annot_cols) == color.by)]]
}else{
cols <- as.factor(pca.data[,which(colnames(pca.data) == color.by)])
colors <- scales::hue_pal()(length(levels(cols)))
}
} else{ cols <- color.by; colors <- color.by}
p <- ggplot(pca.data, aes(x=eval(parse(text = PCs.to.plot[1])),y=eval(parse(text = PCs.to.plot[2])),fill=cols))+ geom_point(pch=21,color="black",size=point.size, alpha = transparency)  +
scale_fill_manual(values=colors) +labs(x=paste(PCs.to.plot[1]), y= paste(PCs.to.plot[2])) + ggtitle(main) +
theme_bw() + theme(panel.grid = element_blank(), plot.title = element_text(hjust=0.5, size=40),
axis.text = element_text(size=25),axis.title = element_text(size=30), legend.position = legend.position)
}
}
if (to.pca == "genes") {
temp.annotations.genes <- params$annotations.genes
pca <- pcaMethods::pca((data), nPcs = nPcs)
pca.scrs <- pcaMethods::scores(pca)
pca.ldgs <- pcaMethods::loadings(pca)
if (sum(custom.color.vec != FALSE) > 0) {
pca.data <- data.frame(pca.scrs)
cols <- custom.color.vec
p <- ggplot(pca.data, aes(x=eval(parse(text = PCs.to.plot[1])),y=eval(parse(text = PCs.to.plot[2])),fill=cols))+ geom_point(pch=21,color="black",size=point.size, alpha = transparency)  +
scale_fill_identity() +labs(x=paste(PCs.to.plot[1]), y= paste(PCs.to.plot[2])) + ggtitle(main) +
theme_bw() + theme(panel.grid = element_blank(), plot.title = element_text(hjust=0.5, size=40),
axis.text = element_text(size=25),axis.title = element_text(size=30), legend.position = legend.position)
}else{
if (color.by %in% colnames(temp.annotations.genes)) {
suppressWarnings( if (is.na(temp.annotations.genes) == FALSE) {
if (sum(rownames(data) %notin% rownames(temp.annotations.genes)) != 0 ) {
stop('rownames of input data do not match rownames of annotations, cannot link annotations to data')}
temp.annotations.genes <- temp.annotations.genes[match(rownames(data), rownames(temp.annotations.genes)),, drop = FALSE]
pca.data <- data.frame(pca.scrs,temp.annotations.genes)
#temp.annotations.genes <-temp.annotations.genes[match(rownames(data), rownames(temp.annotations.genes)),]
})
if (color.by %in% names(params$annot_cols)) {
cols <- as.factor(pca.data[,which(colnames(pca.data) == color.by)])
colors <- params$annot_cols[[which(names(params$annot_cols) == color.by)]]
}else{
cols <- as.factor(pca.data[,which(colnames(pca.data) == color.by)])
colors <- scales::hue_pal()(length(levels(cols)))
}
} else{ cols <- color.by; colors <- color.by}
p <- ggplot(pca.data, aes(x=eval(parse(text = PCs.to.plot[1])),y=eval(parse(text = PCs.to.plot[2])),fill=cols))+ geom_point(pch=21,color="black",size=point.size, alpha = transparency)  +
scale_fill_manual(values=colors) +labs(x=paste(PCs.to.plot[1]), y= paste(PCs.to.plot[2])) + ggtitle(main) +
theme_bw() + theme(panel.grid = element_blank(), plot.title = element_text(hjust=0.5, size=40),
axis.text = element_text(size=25),axis.title = element_text(size=30), legend.position = legend.position)
}
}
return(p)
}
myPCA(full, color.by = "Region")
library(dataVisEasy)
myPCA(full, color.by = "Region")
'%notin%' <- Negate('%in%')
myPCA(full, color.by = "Region")
myPCA(full, color.by = "Region") +theme(legend.title = "Region")
myPCA(full, color.by = "Region") +theme(legend.title = element_text("Region"))
myPCA <- function(
data,
to.pca = "samples",
nPcs= 3,
color.by = "blue", ##vetor same length or in annotations, annot_cols
custom.color.vec = FALSE,
PCs.to.plot = c("PC1","PC2"),
legend.position = "right",
main = NULL,
point.size =5,
transparency = 1,
percent.mad =0.5
){
if (to.pca == "samples") {
temp.annotations <- params$annotations
pca <- pcaMethods::pca(t(data), nPcs = nPcs)
pca.scrs <- pcaMethods::scores(pca)
pca.ldgs <- pcaMethods::loadings(pca)
if (color.by %in% rownames(data) | sum(custom.color.vec != FALSE) > 0) {
pca.data <- pca.scrs
if (color.by %in% rownames(data)) {
genedat<- data[which(rownames(data)==color.by),]
cols <- myColorRamp5(params$expression_gradient.colors,genedat, percent.mad = percent.mad)
} else{ cols <- custom.color.vec}
p <- ggplot(pca.data, aes(x=eval(parse(text = PCs.to.plot[1])),y=eval(parse(text = PCs.to.plot[2])),fill=eval(parse(text = color.by))))+ geom_point(pch=21,color="black",size=point.size, alpha = transparency)  +
scale_fill_identity() +labs(x=paste(PCs.to.plot[1]), y= paste(PCs.to.plot[2])) + ggtitle(main) +
theme_bw() + theme(panel.grid = element_blank(), plot.title = element_text(hjust=0.5, size=40),
axis.text = element_text(size=25),axis.title = element_text(size=30), legend.position = legend.position)
}else{
if (color.by %in% colnames(temp.annotations)) {
suppressWarnings( if (is.na(temp.annotations) == FALSE) {
if (sum(colnames(data) %notin% rownames(temp.annotations)) != 0 ) {
stop('colnames of input data do not match rownames of annotations, cannot link annotations to data')}
temp.annotations <- temp.annotations[match(colnames(data), rownames(temp.annotations)),, drop = FALSE]
#temp.annotations <- temp.annotations[match(colnames(data), rownames(temp.annotations)),]
pca.data <- data.frame(pca.scrs,temp.annotations)
})
if (color.by %in% names(params$annot_cols)) {
cols <- as.factor(pca.data[,which(colnames(pca.data) == color.by)])
colors <- params$annot_cols[[which(names(params$annot_cols) == color.by)]]
}else{
cols <- as.factor(pca.data[,which(colnames(pca.data) == color.by)])
colors <- scales::hue_pal()(length(levels(cols)))
}
} else{ cols <- color.by; colors <- color.by}
p <- ggplot(pca.data, aes(x=eval(parse(text = PCs.to.plot[1])),y=eval(parse(text = PCs.to.plot[2])),fill=eval(parse(text = color.by))))+ geom_point(pch=21,color="black",size=point.size, alpha = transparency)  +
scale_fill_manual(values=colors) +labs(x=paste(PCs.to.plot[1]), y= paste(PCs.to.plot[2])) + ggtitle(main) +
theme_bw() + theme(panel.grid = element_blank(), plot.title = element_text(hjust=0.5, size=40),
axis.text = element_text(size=25),axis.title = element_text(size=30), legend.position = legend.position)
}
}
if (to.pca == "genes") {
temp.annotations.genes <- params$annotations.genes
pca <- pcaMethods::pca((data), nPcs = nPcs)
pca.scrs <- pcaMethods::scores(pca)
pca.ldgs <- pcaMethods::loadings(pca)
if (sum(custom.color.vec != FALSE) > 0) {
pca.data <- data.frame(pca.scrs)
cols <- custom.color.vec
p <- ggplot(pca.data, aes(x=eval(parse(text = PCs.to.plot[1])),y=eval(parse(text = PCs.to.plot[2])),fill=eval(parse(text = color.by))))+ geom_point(pch=21,color="black",size=point.size, alpha = transparency)  +
scale_fill_identity() +labs(x=paste(PCs.to.plot[1]), y= paste(PCs.to.plot[2])) + ggtitle(main) +
theme_bw() + theme(panel.grid = element_blank(), plot.title = element_text(hjust=0.5, size=40),
axis.text = element_text(size=25),axis.title = element_text(size=30), legend.position = legend.position)
}else{
if (color.by %in% colnames(temp.annotations.genes)) {
suppressWarnings( if (is.na(temp.annotations.genes) == FALSE) {
if (sum(rownames(data) %notin% rownames(temp.annotations.genes)) != 0 ) {
stop('rownames of input data do not match rownames of annotations, cannot link annotations to data')}
temp.annotations.genes <- temp.annotations.genes[match(rownames(data), rownames(temp.annotations.genes)),, drop = FALSE]
pca.data <- data.frame(pca.scrs,temp.annotations.genes)
#temp.annotations.genes <-temp.annotations.genes[match(rownames(data), rownames(temp.annotations.genes)),]
})
if (color.by %in% names(params$annot_cols)) {
cols <- as.factor(pca.data[,which(colnames(pca.data) == color.by)])
colors <- params$annot_cols[[which(names(params$annot_cols) == color.by)]]
}else{
cols <- as.factor(pca.data[,which(colnames(pca.data) == color.by)])
colors <- scales::hue_pal()(length(levels(cols)))
}
} else{ cols <- color.by; colors <- color.by}
p <- ggplot(pca.data, aes(x=eval(parse(text = PCs.to.plot[1])),y=eval(parse(text = PCs.to.plot[2])),fill=eval(parse(text = color.by))))+ geom_point(pch=21,color="black",size=point.size, alpha = transparency)  +
scale_fill_manual(values=colors) +labs(x=paste(PCs.to.plot[1]), y= paste(PCs.to.plot[2])) + ggtitle(main) +
theme_bw() + theme(panel.grid = element_blank(), plot.title = element_text(hjust=0.5, size=40),
axis.text = element_text(size=25),axis.title = element_text(size=30), legend.position = legend.position)
}
}
return(p)
}
myPCA <- function(
data,
to.pca = "samples",
nPcs= 3,
color.by = "blue", ##vetor same length or in annotations, annot_cols
custom.color.vec = FALSE,
PCs.to.plot = c("PC1","PC2"),
legend.position = "right",
main = NULL,
point.size =5,
transparency = 1,
percent.mad =0.5
){
if (to.pca == "samples") {
temp.annotations <- params$annotations
pca <- pcaMethods::pca(t(data), nPcs = nPcs)
pca.scrs <- pcaMethods::scores(pca)
pca.ldgs <- pcaMethods::loadings(pca)
if (color.by %in% rownames(data) | sum(custom.color.vec != FALSE) > 0) {
pca.data <- pca.scrs
if (color.by %in% rownames(data)) {
genedat<- data[which(rownames(data)==color.by),]
cols <- myColorRamp5(params$expression_gradient.colors,genedat, percent.mad = percent.mad)
} else{ cols <- custom.color.vec}
p <- ggplot(pca.data, aes(x=eval(parse(text = PCs.to.plot[1])),y=eval(parse(text = PCs.to.plot[2])),fill=cols))+ geom_point(pch=21,color="black",size=point.size, alpha = transparency)  +
scale_fill_identity() +labs(x=paste(PCs.to.plot[1]), y= paste(PCs.to.plot[2])) + ggtitle(main) +
theme_bw() + theme(panel.grid = element_blank(), plot.title = element_text(hjust=0.5, size=40),
axis.text = element_text(size=25),axis.title = element_text(size=30), legend.position = legend.position)
}else{
if (color.by %in% colnames(temp.annotations)) {
suppressWarnings( if (is.na(temp.annotations) == FALSE) {
if (sum(colnames(data) %notin% rownames(temp.annotations)) != 0 ) {
stop('colnames of input data do not match rownames of annotations, cannot link annotations to data')}
temp.annotations <- temp.annotations[match(colnames(data), rownames(temp.annotations)),, drop = FALSE]
#temp.annotations <- temp.annotations[match(colnames(data), rownames(temp.annotations)),]
pca.data <- data.frame(pca.scrs,temp.annotations)
})
if (color.by %in% names(params$annot_cols)) {
cols <- as.factor(pca.data[,which(colnames(pca.data) == color.by)])
colors <- params$annot_cols[[which(names(params$annot_cols) == color.by)]]
}else{
cols <- as.factor(pca.data[,which(colnames(pca.data) == color.by)])
colors <- scales::hue_pal()(length(levels(cols)))
}
} else{ cols <- color.by; colors <- color.by}
p <- ggplot(pca.data, aes(x=eval(parse(text = PCs.to.plot[1])),y=eval(parse(text = PCs.to.plot[2])),fill=cols))+ geom_point(pch=21,color="black",size=point.size, alpha = transparency)  +
scale_fill_manual(values=colors) +labs(x=paste(PCs.to.plot[1]), y= paste(PCs.to.plot[2])) + ggtitle(main) +
theme_bw() + theme(panel.grid = element_blank(), plot.title = element_text(hjust=0.5, size=40),
axis.text = element_text(size=25),axis.title = element_text(size=30), legend.position = legend.position)
}
}
if (to.pca == "genes") {
temp.annotations.genes <- params$annotations.genes
pca <- pcaMethods::pca((data), nPcs = nPcs)
pca.scrs <- pcaMethods::scores(pca)
pca.ldgs <- pcaMethods::loadings(pca)
if (sum(custom.color.vec != FALSE) > 0) {
pca.data <- data.frame(pca.scrs)
cols <- custom.color.vec
p <- ggplot(pca.data, aes(x=eval(parse(text = PCs.to.plot[1])),y=eval(parse(text = PCs.to.plot[2])),fill=cols))+ geom_point(pch=21,color="black",size=point.size, alpha = transparency)  +
scale_fill_identity() +labs(x=paste(PCs.to.plot[1]), y= paste(PCs.to.plot[2])) + ggtitle(main) +
theme_bw() + theme(panel.grid = element_blank(), plot.title = element_text(hjust=0.5, size=40),
axis.text = element_text(size=25),axis.title = element_text(size=30), legend.position = legend.position)
}else{
if (color.by %in% colnames(temp.annotations.genes)) {
suppressWarnings( if (is.na(temp.annotations.genes) == FALSE) {
if (sum(rownames(data) %notin% rownames(temp.annotations.genes)) != 0 ) {
stop('rownames of input data do not match rownames of annotations, cannot link annotations to data')}
temp.annotations.genes <- temp.annotations.genes[match(rownames(data), rownames(temp.annotations.genes)),, drop = FALSE]
pca.data <- data.frame(pca.scrs,temp.annotations.genes)
#temp.annotations.genes <-temp.annotations.genes[match(rownames(data), rownames(temp.annotations.genes)),]
})
if (color.by %in% names(params$annot_cols)) {
cols <- as.factor(pca.data[,which(colnames(pca.data) == color.by)])
colors <- params$annot_cols[[which(names(params$annot_cols) == color.by)]]
}else{
cols <- as.factor(pca.data[,which(colnames(pca.data) == color.by)])
colors <- scales::hue_pal()(length(levels(cols)))
}
} else{ cols <- color.by; colors <- color.by}
p <- ggplot(pca.data, aes(x=eval(parse(text = PCs.to.plot[1])),y=eval(parse(text = PCs.to.plot[2])),fill=cols))+ geom_point(pch=21,color="black",size=point.size, alpha = transparency)  +
scale_fill_manual(values=colors) +labs(x=paste(PCs.to.plot[1]), y= paste(PCs.to.plot[2])) + ggtitle(main) +
theme_bw() + theme(panel.grid = element_blank(), plot.title = element_text(hjust=0.5, size=40),
axis.text = element_text(size=25),axis.title = element_text(size=30), legend.position = legend.position)
}
}
return(p)
}
myPCA(full, color.by = "Region") + labs(fill="Region")
