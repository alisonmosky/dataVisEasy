coloring <- list(color.by = color.by, colors = colors)
}else{
colors <- scales::hue_pal()(length(levels(as.factor(dat.to.plot[,which(colnames(dat.to.plot) == color.by)]))))
coloring <- list(color.by = color.by, colors = colors)
}
p <- ggplot(dat.to.plot, aes(x=value,fill=eval(parse(text = color.by))))+ geom_density(alpha = transparency) +
scale_fill_manual(values=colors) + labs(fill=color.by) +
theme_bw() + theme(panel.grid = element_blank(), plot.title = element_text(hjust=0.5, size=40),
strip.text = element_text(size=25), strip.background.x = element_blank(), legend.position = legend.position,
axis.title = element_text(size=20), axis.text.x = element_text(size = 15))
call <- 'ggplot(input_data, aes(x=value,fill=color.by))+ geom_density(alpha = transparency) +
scale_fill_manual(values=colors) + labs(fill=color.by) +
theme_bw() + theme(panel.grid = element_blank(), plot.title = element_text(hjust=0.5, size=40),
strip.text = element_text(size=25), strip.background.x = element_blank(), legend.position = legend.position,
axis.title = element_text(size=20), axis.text.x = element_text(size = 15))'
if (facet.annotation == FALSE) { p <- p + facet_wrap(~variable, ncol=ncols, scales=scales)
}else{ p <- p + facet_wrap(eval(parse(text = color.by))~variable, ncol=ncols, scales=scales) }
if(is.raw.Ct==T){
p <- p + xlab("Raw Ct Value") + ylab("Denstiy") + scale_x_reverse()
call <- paste(call, '+ xlab("Raw Ct Value") + ylab("Denstiy") + scale_x_reverse()')
}else{
p <- p + xlab("Normalized Expression Level") + ylab("Density")
call <- paste(call, '+ xlab("Normalized Expression Level") + ylab("Density")')
}
} else{ coloring <- list(color.by = color.by)
dat.to.plot <- data.frame(t(dat)); dat.to.plot <- cbind(dat.to.plot, temp.annotations)
dat.to.plot <- reshape2::melt(dat.to.plot, id.vars = colnames(temp.annotations))
if (sum(!is.na(temp.annotations)) == 0) {
dat.to.plot <- dat.to.plot[-which(dat.to.plot$variable == "temp.annotations"),]
}
p <- ggplot(dat.to.plot, aes(x=value))+ geom_density(alpha = transparency, fill = color.by) + facet_wrap(~variable, ncol=ncols, scales=scales) +
theme_bw() + theme(panel.grid = element_blank(), plot.title = element_text(hjust=0.5, size=40),
strip.text = element_text(size=25), strip.background.x = element_blank(), legend.position = legend.position,
axis.title = element_text(size=20), axis.text.x = element_text(size = 15))
call <- 'ggplot(input_data, aes(x=value))+ geom_density(alpha = transparency, fill = color.by) + facet_wrap(~variable, ncol=ncols, scales=scales) +
theme_bw() + theme(panel.grid = element_blank(), plot.title = element_text(hjust=0.5, size=40),
strip.text = element_text(size=25), strip.background.x = element_blank(), legend.position = legend.position,
axis.title = element_text(size=20), axis.text.x = element_text(size = 15))'
if(is.raw.Ct==T){
p <- p + xlab("Raw Ct Value") + ylab("Denstiy") + scale_x_reverse()
call <- paste(call, '+ xlab("Raw Ct Value") + ylab("Denstiy") + scale_x_reverse()')
}else{
p <- p + xlab("Normalized Expression Level") + ylab("Density")
call <- paste(call, '+ xlab("Normalized Expression Level") + ylab("Density")')
}
}
if (return.ggplot.input == TRUE) {return(list(input_data=dat.to.plot, coloring = coloring, plot_call = call))}
return(p)
}
DensityGenes1(RAGP_norm, "Sst", exact = F, color.by = "Connectivity", facet.annotation = TRUE)
DensityGenes1 <- function(
data,
list,
color.by = "blue", ##also dictates how it will split, need option to make custom vector to split on
exact = TRUE,
facet.annotation = FALSE,
is.raw.Ct = FALSE,
na.fix = 2,
transparency = 0.5,
ncols=2, ##can change
scales="free",
legend.position = "default",
return.ggplot.input = FALSE
){
if (("matrix" %in% class(data)) != TRUE ) {
data <- as.matrix(data)
warning('input data converted to matrix')
}
if (exact == TRUE) {dat<-data[which(rownames(data) %in% list),, drop = FALSE]
if (length(dat) == 0 ) {stop('exact matches for list not found in rownames data')}
if (is.raw.Ct==F & na.fix!=F) {dat[which(is.na(dat))] <- (min(dat, na.rm=T)-na.fix)};if (is.raw.Ct==T & na.fix!=F) {dat[which(is.na(dat))]<- (max(dat, na.rm=T)+na.fix)}}
if (exact == FALSE) {dat<-data[grep(paste(list, collapse = "|"),rownames(data)),, drop = FALSE]
if (length(dat) == 0 ) {stop('inexact matches for list not found in rownames data')}
if (is.raw.Ct==F & na.fix!=F) {dat[which(is.na(dat))] <- (min(dat, na.rm=T)-na.fix)};if (is.raw.Ct==T & na.fix!=F) {dat[which(is.na(dat))]<- (max(dat, na.rm=T)+na.fix)}}
temp.annotations <- params$annotations
if (color.by %in% colnames(temp.annotations)) {
if (legend.position == "default") { legend.position <- "right"}
if (sum(colnames(dat) %notin% rownames(temp.annotations)) != 0 ) {
stop('colnames of input data do not match rownames of annotations, cannot link annotations to data')
}
temp.annotations <- temp.annotations[match(colnames(dat), rownames(temp.annotations)),, drop = FALSE]
dat.to.plot <- data.frame(t(dat)); dat.to.plot <- cbind(dat.to.plot, temp.annotations)
dat.to.plot <- reshape2::melt(dat.to.plot, id.vars = colnames(temp.annotations))
if (color.by %in% names(params$annot_cols)) {
colors <- params$annot_cols[[which(names(params$annot_cols) == color.by)]]
coloring <- list(color.by = color.by, colors = colors)
}else{
colors <- scales::hue_pal()(length(levels(as.factor(dat.to.plot[,which(colnames(dat.to.plot) == color.by)]))))
coloring <- list(color.by = color.by, colors = colors)
}
p <- ggplot(dat.to.plot, aes(x=value,fill=eval(parse(text = color.by))))+ geom_density(alpha = transparency) +
scale_fill_manual(values=colors) + labs(fill=color.by) +
theme_bw() + theme(panel.grid = element_blank(), plot.title = element_text(hjust=0.5, size=40),
strip.text = element_text(size=25), strip.background.x = element_blank(), legend.position = legend.position,
axis.title = element_text(size=20), axis.text.x = element_text(size = 15))
call <- 'ggplot(input_data, aes(x=value,fill=color.by))+ geom_density(alpha = transparency) +
scale_fill_manual(values=colors) + labs(fill=color.by) +
theme_bw() + theme(panel.grid = element_blank(), plot.title = element_text(hjust=0.5, size=40),
strip.text = element_text(size=25), strip.background.x = element_blank(), legend.position = legend.position,
axis.title = element_text(size=20), axis.text.x = element_text(size = 15))'
if (facet.annotation == FALSE) { p <- p + facet_wrap(~variable, ncol=ncols, scales=scales)
}else{ p <- p + facet_wrap(eval(parse(text = color.by))~variable, scales=scales) }
if(is.raw.Ct==T){
p <- p + xlab("Raw Ct Value") + ylab("Denstiy") + scale_x_reverse()
call <- paste(call, '+ xlab("Raw Ct Value") + ylab("Denstiy") + scale_x_reverse()')
}else{
p <- p + xlab("Normalized Expression Level") + ylab("Density")
call <- paste(call, '+ xlab("Normalized Expression Level") + ylab("Density")')
}
} else{ coloring <- list(color.by = color.by)
dat.to.plot <- data.frame(t(dat)); dat.to.plot <- cbind(dat.to.plot, temp.annotations)
dat.to.plot <- reshape2::melt(dat.to.plot, id.vars = colnames(temp.annotations))
if (sum(!is.na(temp.annotations)) == 0) {
dat.to.plot <- dat.to.plot[-which(dat.to.plot$variable == "temp.annotations"),]
}
p <- ggplot(dat.to.plot, aes(x=value))+ geom_density(alpha = transparency, fill = color.by) + facet_wrap(~variable, ncol=ncols, scales=scales) +
theme_bw() + theme(panel.grid = element_blank(), plot.title = element_text(hjust=0.5, size=40),
strip.text = element_text(size=25), strip.background.x = element_blank(), legend.position = legend.position,
axis.title = element_text(size=20), axis.text.x = element_text(size = 15))
call <- 'ggplot(input_data, aes(x=value))+ geom_density(alpha = transparency, fill = color.by) + facet_wrap(~variable, ncol=ncols, scales=scales) +
theme_bw() + theme(panel.grid = element_blank(), plot.title = element_text(hjust=0.5, size=40),
strip.text = element_text(size=25), strip.background.x = element_blank(), legend.position = legend.position,
axis.title = element_text(size=20), axis.text.x = element_text(size = 15))'
if(is.raw.Ct==T){
p <- p + xlab("Raw Ct Value") + ylab("Denstiy") + scale_x_reverse()
call <- paste(call, '+ xlab("Raw Ct Value") + ylab("Denstiy") + scale_x_reverse()')
}else{
p <- p + xlab("Normalized Expression Level") + ylab("Density")
call <- paste(call, '+ xlab("Normalized Expression Level") + ylab("Density")')
}
}
if (return.ggplot.input == TRUE) {return(list(input_data=dat.to.plot, coloring = coloring, plot_call = call))}
return(p)
}
DensityGenes1(RAGP_norm, "Sst", exact = F, color.by = "Connectivity", facet.annotation = TRUE)
DensityGenes1 <- function(
data,
list,
color.by = "blue", ##also dictates how it will split, need option to make custom vector to split on
exact = TRUE,
facet.annotation = FALSE,
is.raw.Ct = FALSE,
na.fix = 2,
transparency = 0.5,
ncols=2, ##can change
scales="free",
legend.position = "default",
return.ggplot.input = FALSE
){
if (("matrix" %in% class(data)) != TRUE ) {
data <- as.matrix(data)
warning('input data converted to matrix')
}
if (exact == TRUE) {dat<-data[which(rownames(data) %in% list),, drop = FALSE]
if (length(dat) == 0 ) {stop('exact matches for list not found in rownames data')}
if (is.raw.Ct==F & na.fix!=F) {dat[which(is.na(dat))] <- (min(dat, na.rm=T)-na.fix)};if (is.raw.Ct==T & na.fix!=F) {dat[which(is.na(dat))]<- (max(dat, na.rm=T)+na.fix)}}
if (exact == FALSE) {dat<-data[grep(paste(list, collapse = "|"),rownames(data)),, drop = FALSE]
if (length(dat) == 0 ) {stop('inexact matches for list not found in rownames data')}
if (is.raw.Ct==F & na.fix!=F) {dat[which(is.na(dat))] <- (min(dat, na.rm=T)-na.fix)};if (is.raw.Ct==T & na.fix!=F) {dat[which(is.na(dat))]<- (max(dat, na.rm=T)+na.fix)}}
temp.annotations <- params$annotations
if (color.by %in% colnames(temp.annotations)) {
if (legend.position == "default") { legend.position <- "right"}
if (sum(colnames(dat) %notin% rownames(temp.annotations)) != 0 ) {
stop('colnames of input data do not match rownames of annotations, cannot link annotations to data')
}
temp.annotations <- temp.annotations[match(colnames(dat), rownames(temp.annotations)),, drop = FALSE]
dat.to.plot <- data.frame(t(dat)); dat.to.plot <- cbind(dat.to.plot, temp.annotations)
dat.to.plot <- reshape2::melt(dat.to.plot, id.vars = colnames(temp.annotations))
if (color.by %in% names(params$annot_cols)) {
colors <- params$annot_cols[[which(names(params$annot_cols) == color.by)]]
coloring <- list(color.by = color.by, colors = colors)
}else{
colors <- scales::hue_pal()(length(levels(as.factor(dat.to.plot[,which(colnames(dat.to.plot) == color.by)]))))
coloring <- list(color.by = color.by, colors = colors)
}
p <- ggplot(dat.to.plot, aes(x=value,fill=eval(parse(text = color.by))))+ geom_density(alpha = transparency) +
scale_fill_manual(values=colors) + labs(fill=color.by) +
theme_bw() + theme(panel.grid = element_blank(), plot.title = element_text(hjust=0.5, size=40),
strip.text = element_text(size=25), strip.background.x = element_blank(), legend.position = legend.position,
axis.title = element_text(size=20), axis.text.x = element_text(size = 15))
call <- 'ggplot(input_data, aes(x=value,fill=color.by))+ geom_density(alpha = transparency) +
scale_fill_manual(values=colors) + labs(fill=color.by) +
theme_bw() + theme(panel.grid = element_blank(), plot.title = element_text(hjust=0.5, size=40),
strip.text = element_text(size=25), strip.background.x = element_blank(), legend.position = legend.position,
axis.title = element_text(size=20), axis.text.x = element_text(size = 15))'
if (facet.annotation == FALSE) { p <- p + facet_wrap(~variable, ncol=ncols, scales=scales)
}else{ p <- p + facet_grid(eval(parse(text = color.by))~variable, scales=scales) }
if(is.raw.Ct==T){
p <- p + xlab("Raw Ct Value") + ylab("Denstiy") + scale_x_reverse()
call <- paste(call, '+ xlab("Raw Ct Value") + ylab("Denstiy") + scale_x_reverse()')
}else{
p <- p + xlab("Normalized Expression Level") + ylab("Density")
call <- paste(call, '+ xlab("Normalized Expression Level") + ylab("Density")')
}
} else{ coloring <- list(color.by = color.by)
dat.to.plot <- data.frame(t(dat)); dat.to.plot <- cbind(dat.to.plot, temp.annotations)
dat.to.plot <- reshape2::melt(dat.to.plot, id.vars = colnames(temp.annotations))
if (sum(!is.na(temp.annotations)) == 0) {
dat.to.plot <- dat.to.plot[-which(dat.to.plot$variable == "temp.annotations"),]
}
p <- ggplot(dat.to.plot, aes(x=value))+ geom_density(alpha = transparency, fill = color.by) + facet_wrap(~variable, ncol=ncols, scales=scales) +
theme_bw() + theme(panel.grid = element_blank(), plot.title = element_text(hjust=0.5, size=40),
strip.text = element_text(size=25), strip.background.x = element_blank(), legend.position = legend.position,
axis.title = element_text(size=20), axis.text.x = element_text(size = 15))
call <- 'ggplot(input_data, aes(x=value))+ geom_density(alpha = transparency, fill = color.by) + facet_wrap(~variable, ncol=ncols, scales=scales) +
theme_bw() + theme(panel.grid = element_blank(), plot.title = element_text(hjust=0.5, size=40),
strip.text = element_text(size=25), strip.background.x = element_blank(), legend.position = legend.position,
axis.title = element_text(size=20), axis.text.x = element_text(size = 15))'
if(is.raw.Ct==T){
p <- p + xlab("Raw Ct Value") + ylab("Denstiy") + scale_x_reverse()
call <- paste(call, '+ xlab("Raw Ct Value") + ylab("Denstiy") + scale_x_reverse()')
}else{
p <- p + xlab("Normalized Expression Level") + ylab("Density")
call <- paste(call, '+ xlab("Normalized Expression Level") + ylab("Density")')
}
}
if (return.ggplot.input == TRUE) {return(list(input_data=dat.to.plot, coloring = coloring, plot_call = call))}
return(p)
}
DensityGenes1 <- function(
data,
list,
color.by = "blue", ##also dictates how it will split, need option to make custom vector to split on
exact = TRUE,
facet.annotation = FALSE,
is.raw.Ct = FALSE,
na.fix = 2,
transparency = 0.5,
ncols=2, ##can change
scales="free",
legend.position = "default",
return.ggplot.input = FALSE
){
if (("matrix" %in% class(data)) != TRUE ) {
data <- as.matrix(data)
warning('input data converted to matrix')
}
if (exact == TRUE) {dat<-data[which(rownames(data) %in% list),, drop = FALSE]
if (length(dat) == 0 ) {stop('exact matches for list not found in rownames data')}
if (is.raw.Ct==F & na.fix!=F) {dat[which(is.na(dat))] <- (min(dat, na.rm=T)-na.fix)};if (is.raw.Ct==T & na.fix!=F) {dat[which(is.na(dat))]<- (max(dat, na.rm=T)+na.fix)}}
if (exact == FALSE) {dat<-data[grep(paste(list, collapse = "|"),rownames(data)),, drop = FALSE]
if (length(dat) == 0 ) {stop('inexact matches for list not found in rownames data')}
if (is.raw.Ct==F & na.fix!=F) {dat[which(is.na(dat))] <- (min(dat, na.rm=T)-na.fix)};if (is.raw.Ct==T & na.fix!=F) {dat[which(is.na(dat))]<- (max(dat, na.rm=T)+na.fix)}}
temp.annotations <- params$annotations
if (color.by %in% colnames(temp.annotations)) {
if (legend.position == "default") { legend.position <- "right"}
if (sum(colnames(dat) %notin% rownames(temp.annotations)) != 0 ) {
stop('colnames of input data do not match rownames of annotations, cannot link annotations to data')
}
temp.annotations <- temp.annotations[match(colnames(dat), rownames(temp.annotations)),, drop = FALSE]
dat.to.plot <- data.frame(t(dat)); dat.to.plot <- cbind(dat.to.plot, temp.annotations)
dat.to.plot <- reshape2::melt(dat.to.plot, id.vars = colnames(temp.annotations))
if (color.by %in% names(params$annot_cols)) {
colors <- params$annot_cols[[which(names(params$annot_cols) == color.by)]]
coloring <- list(color.by = color.by, colors = colors)
}else{
colors <- scales::hue_pal()(length(levels(as.factor(dat.to.plot[,which(colnames(dat.to.plot) == color.by)]))))
coloring <- list(color.by = color.by, colors = colors)
}
p <- ggplot(dat.to.plot, aes(x=value,fill=eval(parse(text = color.by))))+ geom_density(alpha = transparency) +
scale_fill_manual(values=colors) + labs(fill=color.by) +
theme_bw() + theme(panel.grid = element_blank(), plot.title = element_text(hjust=0.5, size=40),
strip.text = element_text(size=25), strip.background.x = element_blank(), legend.position = legend.position,
axis.title = element_text(size=20), axis.text.x = element_text(size = 15))
call <- 'ggplot(input_data, aes(x=value,fill=color.by))+ geom_density(alpha = transparency) +
scale_fill_manual(values=colors) + labs(fill=color.by) +
theme_bw() + theme(panel.grid = element_blank(), plot.title = element_text(hjust=0.5, size=40),
strip.text = element_text(size=25), strip.background.x = element_blank(), legend.position = legend.position,
axis.title = element_text(size=20), axis.text.x = element_text(size = 15))'
if (facet.annotation == FALSE) { p <- p + facet_wrap(~variable, ncol=ncols, scales=scales)
}else{ if (facet.annotation = "wrap") {p <- p + facet_wrap(eval(parse(text = color.by))~variable, scales=scales)
}else{p <- p + facet_grid(eval(parse(text = color.by))~variable, scales=scales) }}
if(is.raw.Ct==T){
p <- p + xlab("Raw Ct Value") + ylab("Denstiy") + scale_x_reverse()
call <- paste(call, '+ xlab("Raw Ct Value") + ylab("Denstiy") + scale_x_reverse()')
}else{
p <- p + xlab("Normalized Expression Level") + ylab("Density")
call <- paste(call, '+ xlab("Normalized Expression Level") + ylab("Density")')
}
} else{ coloring <- list(color.by = color.by)
dat.to.plot <- data.frame(t(dat)); dat.to.plot <- cbind(dat.to.plot, temp.annotations)
dat.to.plot <- reshape2::melt(dat.to.plot, id.vars = colnames(temp.annotations))
if (sum(!is.na(temp.annotations)) == 0) {
dat.to.plot <- dat.to.plot[-which(dat.to.plot$variable == "temp.annotations"),]
}
p <- ggplot(dat.to.plot, aes(x=value))+ geom_density(alpha = transparency, fill = color.by) + facet_wrap(~variable, ncol=ncols, scales=scales) +
theme_bw() + theme(panel.grid = element_blank(), plot.title = element_text(hjust=0.5, size=40),
strip.text = element_text(size=25), strip.background.x = element_blank(), legend.position = legend.position,
axis.title = element_text(size=20), axis.text.x = element_text(size = 15))
call <- 'ggplot(input_data, aes(x=value))+ geom_density(alpha = transparency, fill = color.by) + facet_wrap(~variable, ncol=ncols, scales=scales) +
theme_bw() + theme(panel.grid = element_blank(), plot.title = element_text(hjust=0.5, size=40),
strip.text = element_text(size=25), strip.background.x = element_blank(), legend.position = legend.position,
axis.title = element_text(size=20), axis.text.x = element_text(size = 15))'
if(is.raw.Ct==T){
p <- p + xlab("Raw Ct Value") + ylab("Denstiy") + scale_x_reverse()
call <- paste(call, '+ xlab("Raw Ct Value") + ylab("Denstiy") + scale_x_reverse()')
}else{
p <- p + xlab("Normalized Expression Level") + ylab("Density")
call <- paste(call, '+ xlab("Normalized Expression Level") + ylab("Density")')
}
}
if (return.ggplot.input == TRUE) {return(list(input_data=dat.to.plot, coloring = coloring, plot_call = call))}
return(p)
}
DensityGenes1 <- function(
data,
list,
color.by = "blue", ##also dictates how it will split, need option to make custom vector to split on
exact = TRUE,
facet.annotation = FALSE,
is.raw.Ct = FALSE,
na.fix = 2,
transparency = 0.5,
ncols=2, ##can change
scales="free",
legend.position = "default",
return.ggplot.input = FALSE
){
if (("matrix" %in% class(data)) != TRUE ) {
data <- as.matrix(data)
warning('input data converted to matrix')
}
if (exact == TRUE) {dat<-data[which(rownames(data) %in% list),, drop = FALSE]
if (length(dat) == 0 ) {stop('exact matches for list not found in rownames data')}
if (is.raw.Ct==F & na.fix!=F) {dat[which(is.na(dat))] <- (min(dat, na.rm=T)-na.fix)};if (is.raw.Ct==T & na.fix!=F) {dat[which(is.na(dat))]<- (max(dat, na.rm=T)+na.fix)}}
if (exact == FALSE) {dat<-data[grep(paste(list, collapse = "|"),rownames(data)),, drop = FALSE]
if (length(dat) == 0 ) {stop('inexact matches for list not found in rownames data')}
if (is.raw.Ct==F & na.fix!=F) {dat[which(is.na(dat))] <- (min(dat, na.rm=T)-na.fix)};if (is.raw.Ct==T & na.fix!=F) {dat[which(is.na(dat))]<- (max(dat, na.rm=T)+na.fix)}}
temp.annotations <- params$annotations
if (color.by %in% colnames(temp.annotations)) {
if (legend.position == "default") { legend.position <- "right"}
if (sum(colnames(dat) %notin% rownames(temp.annotations)) != 0 ) {
stop('colnames of input data do not match rownames of annotations, cannot link annotations to data')
}
temp.annotations <- temp.annotations[match(colnames(dat), rownames(temp.annotations)),, drop = FALSE]
dat.to.plot <- data.frame(t(dat)); dat.to.plot <- cbind(dat.to.plot, temp.annotations)
dat.to.plot <- reshape2::melt(dat.to.plot, id.vars = colnames(temp.annotations))
if (color.by %in% names(params$annot_cols)) {
colors <- params$annot_cols[[which(names(params$annot_cols) == color.by)]]
coloring <- list(color.by = color.by, colors = colors)
}else{
colors <- scales::hue_pal()(length(levels(as.factor(dat.to.plot[,which(colnames(dat.to.plot) == color.by)]))))
coloring <- list(color.by = color.by, colors = colors)
}
p <- ggplot(dat.to.plot, aes(x=value,fill=eval(parse(text = color.by))))+ geom_density(alpha = transparency) +
scale_fill_manual(values=colors) + labs(fill=color.by) +
theme_bw() + theme(panel.grid = element_blank(), plot.title = element_text(hjust=0.5, size=40),
strip.text = element_text(size=25), strip.background.x = element_blank(), legend.position = legend.position,
axis.title = element_text(size=20), axis.text.x = element_text(size = 15))
call <- 'ggplot(input_data, aes(x=value,fill=color.by))+ geom_density(alpha = transparency) +
scale_fill_manual(values=colors) + labs(fill=color.by) +
theme_bw() + theme(panel.grid = element_blank(), plot.title = element_text(hjust=0.5, size=40),
strip.text = element_text(size=25), strip.background.x = element_blank(), legend.position = legend.position,
axis.title = element_text(size=20), axis.text.x = element_text(size = 15))'
if (facet.annotation == FALSE) { p <- p + facet_wrap(~variable, ncol=ncols, scales=scales)
}else{ if (facet.annotation == "wrap") {p <- p + facet_wrap(eval(parse(text = color.by))~variable, scales=scales)
}else{p <- p + facet_grid(eval(parse(text = color.by))~variable, scales=scales) }}
if(is.raw.Ct==T){
p <- p + xlab("Raw Ct Value") + ylab("Denstiy") + scale_x_reverse()
call <- paste(call, '+ xlab("Raw Ct Value") + ylab("Denstiy") + scale_x_reverse()')
}else{
p <- p + xlab("Normalized Expression Level") + ylab("Density")
call <- paste(call, '+ xlab("Normalized Expression Level") + ylab("Density")')
}
} else{ coloring <- list(color.by = color.by)
dat.to.plot <- data.frame(t(dat)); dat.to.plot <- cbind(dat.to.plot, temp.annotations)
dat.to.plot <- reshape2::melt(dat.to.plot, id.vars = colnames(temp.annotations))
if (sum(!is.na(temp.annotations)) == 0) {
dat.to.plot <- dat.to.plot[-which(dat.to.plot$variable == "temp.annotations"),]
}
p <- ggplot(dat.to.plot, aes(x=value))+ geom_density(alpha = transparency, fill = color.by) + facet_wrap(~variable, ncol=ncols, scales=scales) +
theme_bw() + theme(panel.grid = element_blank(), plot.title = element_text(hjust=0.5, size=40),
strip.text = element_text(size=25), strip.background.x = element_blank(), legend.position = legend.position,
axis.title = element_text(size=20), axis.text.x = element_text(size = 15))
call <- 'ggplot(input_data, aes(x=value))+ geom_density(alpha = transparency, fill = color.by) + facet_wrap(~variable, ncol=ncols, scales=scales) +
theme_bw() + theme(panel.grid = element_blank(), plot.title = element_text(hjust=0.5, size=40),
strip.text = element_text(size=25), strip.background.x = element_blank(), legend.position = legend.position,
axis.title = element_text(size=20), axis.text.x = element_text(size = 15))'
if(is.raw.Ct==T){
p <- p + xlab("Raw Ct Value") + ylab("Denstiy") + scale_x_reverse()
call <- paste(call, '+ xlab("Raw Ct Value") + ylab("Denstiy") + scale_x_reverse()')
}else{
p <- p + xlab("Normalized Expression Level") + ylab("Density")
call <- paste(call, '+ xlab("Normalized Expression Level") + ylab("Density")')
}
}
if (return.ggplot.input == TRUE) {return(list(input_data=dat.to.plot, coloring = coloring, plot_call = call))}
return(p)
}
DensityGenes1(RAGP_norm, "Sst", exact = F, color.by = "Connectivity", facet.annotation = TRUE)
DensityGenes1(RAGP_rawCt, "Sst", exact = F, is.raw.Ct = T, color.by = "Connectivity", facet.annotation = TRUE)
DensityGenes1(RAGP_rawCt, "Sst", exact = F, is.raw.Ct = T, color.by = "Animal", facet.annotation = TRUE)
library(dataVisEasy)
scatterGenes(RAGP_norm, "Th","Chat")
scatterGenes1 <- function(
data,
gene1,
gene2,
custom.x = FALSE,
custom.y = FALSE,
is.raw.Ct = FALSE, ##if data is raw and axis should be flipped, set to TRUE
na.fix = 2,
color.by= "blue",  ##can be a color, gene, otherwise utilize annot_samps and annot_cols
custom.color.vec = FALSE, ##give custom vector, same order as samples
xlimits = FALSE, #will make limits automatically, can switch to specify
ylimits = FALSE,
squish1 = FALSE, #if limits are specified, will remove points outside the range, can change to set to mins, maxs
squish2 = FALSE,
point.size = 5,
transparency = 1,
legend.position = "default",
percent.mad = 0.5,
return.ggplot.input = FALSE
){
if (("matrix" %in% class(data)) != TRUE ) {
data <- as.matrix(data)
warning('input data converted to matrix')
}
if (length(custom.x) == 1 & custom.x[1] == FALSE) {
if (gene1 %notin% rownames(data)) {stop('gene1 not found in rownames data')}
dat1<-data[which(rownames(data) %in% gene1),]; if (is.raw.Ct==F & na.fix!=F) {dat1[which(is.na(dat1))] <- (min(dat1, na.rm=T)-na.fix)};if (is.raw.Ct==T & na.fix!=F) {dat1[which(is.na(dat1))]<- (max(dat1, na.rm=T)+na.fix)}
}else{dat1 <- custom.x; gene1 <- "Custom X"   }
if (length(custom.y) == 1 & custom.y[1] == FALSE) {
if (gene2 %notin% rownames(data)) {stop('gene2 not found in rownames data')}
dat2<-data[which(rownames(data) %in% gene2),]; if (is.raw.Ct==F & na.fix!=F) {dat2[which(is.na(dat2))] <- (min(dat2, na.rm=T)-na.fix)};if (is.raw.Ct==T & na.fix!=F) {dat2[which(is.na(dat2))]<- (max(dat2, na.rm=T)+na.fix)}
}else{dat2 <- custom.y; gene2 <- "Custom Y"}
temp.annotations <- params$annotations
dat.to.plot <- data.frame(Gene1= dat1, Gene2= dat2); dat.to.plot <- cbind(dat.to.plot, temp.annotations)
if (color.by %in% rownames(data) | sum(custom.color.vec != FALSE) > 0) {
if (legend.position == "default") { legend.position <- "none"}
if (color.by %in% rownames(data)) {
genedat<- data[which(rownames(data)==color.by),]
colors <- myColorRamp5(params$expression_gradient.colors,genedat, percent.mad = percent.mad)
} else{ colors <- custom.color.vec}
coloring <- list(color.by = color.by, colors = colors)
if (((xlimits==FALSE) && (ylimits==FALSE)) == TRUE) {
if (sum(squish1 != FALSE) != 0) {dat.to.plot$Gene1 <-  scales::squish(dat.to.plot$Gene1,squish1)}
if (sum(squish2 != FALSE) != 0) {dat.to.plot$Gene2 <-  scales::squish(dat.to.plot$Gene2,squish2)}
p <- ggplot(dat.to.plot, aes(x=Gene1,y=Gene2,fill=cols))+ geom_point(pch=21,color="black",size=5, alpha = transparency)  +
scale_fill_identity() +labs(x=paste(gene1), y= paste(gene2)) +ggtitle(paste(gene2, "vs.",gene1)) +
theme_bw() + theme(panel.grid = element_blank(), plot.title = element_text(hjust=0.5, size=40),
axis.text = element_text(size=25),axis.title = element_text(size=30),
legend.position = legend.position)
call <- 'ggplot(input_data, aes(x=Gene1,y=Gene2,fill=colors))+ geom_point(pch=21,color="black",size=5, alpha = transparency)  +
scale_fill_identity() +labs(x=paste(gene1), y= paste(gene2)) +ggtitle(paste(gene2, "vs.",gene1)) +
theme_bw() + theme(panel.grid = element_blank(), plot.title = element_text(hjust=0.5, size=40),
axis.text = element_text(size=25),axis.title = element_text(size=30),
legend.position = legend.position)'
if (is.raw.Ct==T) {p <- p + scale_x_reverse() + scale_y_reverse()
call <- paste(call, '+ scale_x_reverse() + scale_y_reverse()')}
}
if ((xlimits || ylimits) == TRUE) {p <- p + xlim(c(xlimits)) + ylim(c(ylimits))
call <- paste(call, '+ xlim(c(xlimits)) + ylim(c(ylimits))')}
} else{
if (color.by %in% colnames(temp.annotations)) {
if (legend.position == "default") { legend.position <- "right"}
if (sum(colnames(data) %notin% rownames(temp.annotations)) != 0 ) {
stop('colnames of input data do not match rownames of annotations, cannot link annotations to data')
}
temp.annotations <- temp.annotations[match(colnames(data), rownames(temp.annotations)),, drop = FALSE]
if (color.by %in% names(params$annot_cols)) {
colors <- params$annot_cols[[which(names(params$annot_cols) == color.by)]]
coloring <- list(color.by = color.by,  colors = colors)
}else{
colors <- scales::hue_pal()(length(levels(as.factor(dat.to.plot[,which(colnames(dat.to.plot) == color.by)]))))
coloring <- list(color.by = color.by,  colors = colors)
}
if (((xlimits==FALSE) && (ylimits==FALSE)) == TRUE) {
if (sum(squish1 != FALSE) != 0) {dat.to.plot$Gene1 <-  scales::squish(dat.to.plot$Gene1,squish1)}
if (sum(squish2 != FALSE) != 0) {dat.to.plot$Gene2 <-  scales::squish(dat.to.plot$Gene2,squish2)}
p <- ggplot(dat.to.plot, aes(x=Gene1,y=Gene2,fill=eval(parse(text = color.by))))+ geom_point(pch=21,color="black",size=point.size, alpha = transparency)  +
scale_fill_manual(values=colors) +labs(x=paste(gene1), y= paste(gene2)) +ggtitle(paste(gene2, "vs.",gene1)) + labs(fill=color.by) +
theme_bw() + theme(panel.grid = element_blank(), plot.title = element_text(hjust=0.5, size=40),
axis.text = element_text(size=25),axis.title = element_text(size=30), legend.position = legend.position)
call <- 'ggplot(input_data, aes(x=Gene1,y=Gene2,fill=color.by))+ geom_point(pch=21,color="black",size=point.size, alpha = transparency)  +
scale_fill_manual(values=colors) +labs(x=paste(gene1), y= paste(gene2)) +ggtitle(paste(gene2, "vs.",gene1)) + labs(fill=color.by) +
theme_bw() + theme(panel.grid = element_blank(), plot.title = element_text(hjust=0.5, size=40),
axis.text = element_text(size=25),axis.title = element_text(size=30), legend.position = legend.position)'
if (is.raw.Ct==T) {p <- p + scale_x_reverse() + scale_y_reverse()
call <- paste(call, '+ scale_x_reverse() + scale_y_reverse()')}
}
if ((xlimits || ylimits) == TRUE) {p <- p + xlim(c(xlimits)) + ylim(c(ylimits))
call <- paste(call, '+ xlim(c(xlimits)) + ylim(c(ylimits))')}
} else{
coloring <- list(color.by = color.by)
if (((xlimits==FALSE) && (ylimits==FALSE)) == TRUE) {
if (sum(squish1 != FALSE) != 0) {dat.to.plot$Gene1 <-  scales::squish(dat.to.plot$Gene1,squish1)}
if (sum(squish2 != FALSE) != 0) {dat.to.plot$Gene2 <-  scales::squish(dat.to.plot$Gene2,squish2)}
p <- ggplot(dat.to.plot, aes(x=Gene1,y=Gene2))+ geom_point(pch=21,color="black",fill = color.by, size=point.size, alpha = transparency)  +
scale_fill_manual(values=colors) +labs(x=paste(gene1), y= paste(gene2)) +ggtitle(paste(gene2, "vs.",gene1)) + labs(fill=color.by) +
theme_bw() + theme(panel.grid = element_blank(), plot.title = element_text(hjust=0.5, size=40),
axis.text = element_text(size=25),axis.title = element_text(size=30), legend.position = legend.position)
call <- 'ggplot(dat.to.plot, aes(x=Gene1,y=Gene2))+ geom_point(pch=21,color="black",fill = color.by, size=point.size, alpha = transparency)  +
scale_fill_manual(values=colors) +labs(x=paste(gene1), y= paste(gene2)) +ggtitle(paste(gene2, "vs.",gene1)) + labs(fill=color.by) +
theme_bw() + theme(panel.grid = element_blank(), plot.title = element_text(hjust=0.5, size=40),
axis.text = element_text(size=25),axis.title = element_text(size=30), legend.position = legend.position)'
if (is.raw.Ct==T) {p <- p + scale_x_reverse() + scale_y_reverse()
call <- paste(call, '+ scale_x_reverse() + scale_y_reverse()')}
}
if ((xlimits || ylimits) == TRUE) {p <- p + xlim(c(xlimits)) + ylim(c(ylimits))
call <- paste(call, '+ xlim(c(xlimits)) + ylim(c(ylimits))')}
}
}
if (return.ggplot.input == TRUE) {return(list(input_data=dat.to.plot, coloring=coloring, plot_call = call))}
return(p)
}
scatterGenes1(RAGP_norm, "Th","Chat")
library(dataVisEasy)
scatterGenes(RAGP_norm, "Th","Chat", color.by = "Th")
library(dataVisEasy)
scatterGenes(RAGP_norm, "Th","Chat", color.by = "Th")
library(dataVisEasy)
