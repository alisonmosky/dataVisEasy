AOV1way1 <- function(
  data.to.aov,
  category,
  pthreshold = 0.05,
  additional.report = "NONE"  ##options are "NONE", "TUKEY","AOV", or "ALL"
){

  if (("matrix" %in% class(data.to.aov)) != TRUE ) {
    data.to.aov <- as.matrix(data.to.aov)
    warning('input data converted to matrix')
  }

  ####if data is not all samples, subset annotations appropriately
  if (sum(colnames(data.to.aov) %notin% rownames(params$annotations)) != 0 ) {
    stop('colnames of input data do not match rownames of annotations, cannot link annotations to data and assign groupings for ANOVA')}

  temp.annotations <- params$annotations[match(colnames(data.to.aov), rownames(params$annotations)),]

  groupings <- droplevels(as.factor(temp.annotations[,category]))


  ##remove rows where there are no observations for one category


  dat.check <- t(data.to.aov); dat.check <- melt(dat.check); dat.check$groupings <- groupings
  present <- summarise_all(group_by(dat.check,Var2, groupings), list(present=function(x)(sum(!is.na(x)))))
  incomplete <- unique(as.character(present$Var2[which(present$value_present == 0)]))


  present.incomplete <- present[which(present$Var2 %in% incomplete),] %>% group_by(Var2)
  levels.present <- present.incomplete %>% summarise_at("value_present",function(x)(sum(x != 0)))
  take.out <- unique(as.character(levels.present$Var2[which(levels.present$value_present <= 1)]))

  if (length(take.out != 0)) {
    data.to.aov <- data.to.aov[-which(rownames(data.to.aov) %in% take.out),]
    warning(paste(paste(take.out, collapse = ", "),"do not have two or more groups with no non-missing arguments and have been removed from the AOV analysis "))

  }

  incomplete.keep <- incomplete[incomplete %notin% take.out]
  if (length(incomplete.keep) != 0 ) {
    warning(paste(paste(incomplete.keep, collapse = ", "), "have at least one group with no non-missing arguments"))
  }



  aov.all <- apply(data.to.aov, 1, function(x)(summary(aov(x~groupings))))

  aov.results <- data.frame(FVal=unlist(lapply(aov.all,function(x)((x[[1]]$`F value`[1])))),
                            pVal=unlist(lapply(aov.all,function(x)((x[[1]]$`Pr(>F)`[1])))),
                            row.names = names(aov.all))

  sig.genes <- rownames(aov.results)[which(aov.results$pVal <= pthreshold)]
  nonsig.genes <- rownames(aov.results)[which(aov.results$pVal > pthreshold)]

  sig.set <- data.to.aov[which(rownames(data.to.aov) %in% sig.genes),]

  tukey.all <-  apply(sig.set,1,function(x)(TukeyHSD(aov(x~groupings))))

  tukey.pvals <- data.frame(Reduce(bind_rows, lapply(tukey.all,function(x)(x$groupings[,4]))), row.names = names(tukey.all)); colnames(tukey.pvals) <- gsub("\\.","-", colnames(tukey.pvals))
  tukey.diffs <- data.frame(Reduce(bind_rows, lapply(tukey.all,function(x)(x$groupings[,1]))), row.names = names(tukey.all)); colnames(tukey.diffs) <- gsub("\\.","-", colnames(tukey.diffs))


  if (toupper(additional.report) == "ALL") {
    return(list('AOV.output' = aov.all,
                'AOV.Results' = aov.results,
                'Sig.Genes' = sig.genes,
                'NonSig.Genes' = nonsig.genes,
                'Tukey.output' = tukey.all,
                'Tukey.pVals' = tukey.pvals),
           'Tukey.diffs' = tukey.diffs)
  }

  if (toupper(additional.report) == "TUKEY") {
    return(list('AOV.Results' = aov.results,
                'Sig.Genes' = sig.genes,
                'NonSig.Genes' = nonsig.genes,
                'Tukey.output' = tukey.all,
                'Tukey.pVals' = tukey.pvals,
                'Tukey.diffs' = tukey.diffs))
  }

  if (toupper(additional.report) == "AOV") {
    return(list('AOV.output' = aov.all,
                'AOV.Results' = aov.results,
                'Sig.Genes' = sig.genes,
                'NonSig.Genes' = nonsig.genes,
                'Tukey.pVals' = tukey.pvals,
                'Tukey.diffs' = tukey.diffs))
  }

  if (toupper(additional.report) == "NONE") {
    return(list('AOV.Results' = aov.results,
                'Sig.Genes' = sig.genes,
                'NonSig.Genes' = nonsig.genes,
                'Tukey.pVals' = tukey.pvals,
                'Tukey.diffs' = tukey.diffs))
  }

}




AOV2way1 <- function(
  data.to.aov,
  category1,
  category2,
  pthreshold = 0.05,
  additional.report = "NONE"  ##options are "NONE", "TUKEY","AOV", or "ALL"
){

  if (("matrix" %in% class(data.to.aov)) != TRUE ) {
    data.to.aov <- as.matrix(data.to.aov)
    warning('input data converted to matrix')
  }

  ####if data is not all samples, subset annotations appropriately
  if (sum(colnames(data.to.aov) %notin% rownames(params$annotations)) != 0 ) {
    stop('colnames of input data do not match rownames of annotations, cannot link annotations to data and assign groupings for ANOVA')}

  temp.annotations <- params$annotations[match(colnames(data.to.aov), rownames(params$annotations)),]

  groupings1 <- droplevels(as.factor(temp.annotations[,category1]))
  groupings2 <- droplevels(as.factor(temp.annotations[,category2]))


  ##remove rows where there are no observations for either category


  dat.check <- t(data.to.aov); dat.check <- melt(dat.check); dat.check$grouping1 <- groupings1; dat.check$grouping2 <- groupings2
  present1 <- summarise_all(group_by(dat.check,Var2, grouping1), list(present=function(x)(sum(!is.na(x)))))
  present2 <- summarise_all(group_by(dat.check,Var2, grouping2), list(present=function(x)(sum(!is.na(x)))))

  incomplete1 <- unique(as.character(present1$Var2[which(present1$value_present == 0)]))
  present.incomplete1 <- present1[which(present1$Var2 %in% incomplete1),] %>% group_by(Var2)
  levels.present1 <- present.incomplete1 %>% summarise_at("value_present",function(x)(sum(x != 0)))
  take.out1 <- unique(as.character(levels.present1$Var2[which(levels.present1$value_present <= 1)]))

  incomplete2 <- unique(as.character(present2$Var2[which(present2$value_present == 0)]))
  present.incomplete2 <- present2[which(present2$Var2 %in% incomplete2),] %>% group_by(Var2)
  levels.present2 <- present.incomplete2 %>% summarise_at("value_present",function(x)(sum(x != 0)))
  take.out2 <- unique(as.character(levels.present2$Var2[which(levels.present2$value_present <= 1)]))

  if (length(unique(c(take.out1,take.out2)) != 0)) {
    data.to.aov <- data.to.aov[-which(rownames(data.to.aov) %in% unique(c(take.out1,take.out2))),]
    warning(paste(paste(unique(c(take.out1,take.out2)), collapse = ", "),"do not have two or more groups with no non-missing arguments and have been removed from the AOV analysis "))

  }

  incomplete.keep <- unique(c(incomplete1,incomplete2))[unique(c(incomplete1,incomplete2)) %notin% unique(c(take.out1,take.out2))]
  if (length(incomplete.keep) != 0 ) {
    warning(paste(paste(incomplete.keep, collapse = ", "), "have at least one group with no non-missing arguments"))
  }



  #####issue with some effects not being estimable, reducing the matrix, reduces it down to 1 annotation....
  ###why does this happen???
  #####some type of error or something to warn that this is happening, recommend switching to AOV1

  ###check if all effects are estimable
  aov.check <- aov(data.to.aov[1,]~groupings1 + groupings2 + groupings1:groupings2)
  if (aov.check$rank < length(aov.check$coefficients)) {
    stop('Some effects not estimable. This is likely due to overlap in the two categories provided. Consider using AOV1way with one of the categories provided instead')
  }

  aov.all <- apply(data.to.aov, 1, function(x)(summary(aov(x~groupings1 + groupings2 + groupings1:groupings2))))


  aov.results <- t(data.frame((lapply(aov.all, function(x)(unlist(x[[1]]))))))[,c(13:15,17:19)];


  # aov.results <- aov.results[,grep(paste(c("F value[1-3]", "Pr\\(>F\\)[1-3]"), collapse = "|"), colnames(aov.results))]
  #
  # colnames(aov.results) <- gsub("F value","FVal-", colnames(aov.results)); colnames(aov.results) <- gsub("Pr\\(>F\\)","pVal-", colnames(aov.results))
  # colnames(aov.results) <- gsub("1", paste(category1), colnames(aov.results));colnames(aov.results) <- gsub("2", paste(category2), colnames(aov.results));colnames(aov.results) <- gsub("3", paste0(category1,":",category2), colnames(aov.results))
  #
  colnames(aov.results) <- c(paste0("FVal-",category1),paste0("FVal-",category2),paste0("FVal-",category1,":",category2),
                             paste0("pVal-",category1),paste0("pVal-",category2),paste0("pVal-",category1,":",category2))



  # category1.sig <- rownames(aov.res)[which(aov.res[,which(colnames(aov.results) == paste0("pVal-", category1))] <= pthreshold)]
  # category2.sig <- rownames(aov.res)[which(aov.res[,which(colnames(aov.results) == paste0("pVal-", category2))] <= pthreshold)]
  # interaction.sig <- rownames(aov.res)[which(aov.res[,which(colnames(aov.results) == paste0("pVal-", category1,":",category2))] <= pthreshold)]
  #

  category1.sig <- rownames(aov.results)[which(aov.results[,4] <= pthreshold)]
  category2.sig <- rownames(aov.results)[which(aov.results[,5] <= pthreshold)]
  interaction.sig <- rownames(aov.results)[which(aov.results[,6] <= pthreshold)]
  any.sig <- unique(c(category1.sig, category2.sig, interaction.sig))
  nonsig.genes <- rownames(data.to.aov)[rownames(data.to.aov) %notin% any.sig]

  sig.set <- data.to.aov[which(rownames(data.to.aov) %in% any.sig),]

  tukey.all <- apply(data.to.aov, 1, function(x)(TukeyHSD(aov(x~groupings1 + groupings2 + groupings1:groupings2))))

  tukey.pvals1 <- data.frame(lapply(lapply(lapply(tukey.all[which(names(tukey.all) %in% category1.sig)],function(x)(x$groupings1[,4, drop = FALSE])), as.data.frame ), tibble::rownames_to_column) %>% plyr::join_all(by = "rowname") %>% tibble::column_to_rownames("rowname") %>%  t(), row.names = names(tukey.all)[which(names(tukey.all) %in% category1.sig)]); colnames(tukey.pvals1) <- rownames(tukey.all[[1]]$groupings1) # gsub("\\.","-", colnames(tukey.pvals1))
  tukey.pvals2 <- data.frame(lapply(lapply(lapply(tukey.all[which(names(tukey.all) %in% category2.sig)],function(x)(x$groupings2[,4, drop = FALSE])), as.data.frame ), tibble::rownames_to_column) %>% plyr::join_all(by = "rowname") %>% tibble::column_to_rownames("rowname") %>%  t(), row.names = names(tukey.all)[which(names(tukey.all) %in% category2.sig)]); colnames(tukey.pvals2) <- rownames(tukey.all[[1]]$groupings2) # gsub("\\.","-", colnames(tukey.pvals1))
  tukey.pvals3 <- data.frame(lapply(lapply(lapply(tukey.all[which(names(tukey.all) %in% interaction.sig)],function(x)(x$`groupings1:groupings2`[,4, drop = FALSE])), as.data.frame ), tibble::rownames_to_column) %>% plyr::join_all(by = "rowname") %>% tibble::column_to_rownames("rowname") %>%  t(), row.names = names(tukey.all)[which(names(tukey.all) %in% interaction.sig)]); colnames(tukey.pvals3) <- rownames(tukey.all[[1]]$`groupings1:groupings2`) # gsub("\\.","-", colnames(tukey.pvals1))

  tukey.diffs1 <- data.frame(lapply(lapply(lapply(tukey.all[which(names(tukey.all) %in% category1.sig)],function(x)(x$groupings1[,1, drop = FALSE])), as.data.frame ), tibble::rownames_to_column) %>% plyr::join_all(by = "rowname") %>% tibble::column_to_rownames("rowname") %>%  t(), row.names = names(tukey.all)[which(names(tukey.all) %in% category1.sig)]); colnames(tukey.diffs1) <- rownames(tukey.all[[1]]$groupings1) # gsub("\\.","-", colnames(tukey.diffs1))
  tukey.diffs2 <- data.frame(lapply(lapply(lapply(tukey.all[which(names(tukey.all) %in% category2.sig)],function(x)(x$groupings2[,1, drop = FALSE])), as.data.frame ), tibble::rownames_to_column) %>% plyr::join_all(by = "rowname") %>% tibble::column_to_rownames("rowname") %>%  t(), row.names = names(tukey.all)[which(names(tukey.all) %in% category2.sig)]); colnames(tukey.diffs2) <- rownames(tukey.all[[1]]$groupings2) # gsub("\\.","-", colnames(tukey.diffs1))
  tukey.diffs3 <- data.frame(lapply(lapply(lapply(tukey.all[which(names(tukey.all) %in% interaction.sig)],function(x)(x$`groupings1:groupings2`[,1, drop = FALSE])), as.data.frame ), tibble::rownames_to_column) %>% plyr::join_all(by = "rowname") %>% tibble::column_to_rownames("rowname") %>%  t(), row.names = names(tukey.all)[which(names(tukey.all) %in% interaction.sig)]); colnames(tukey.diffs3) <- rownames(tukey.all[[1]]$`groupings1:groupings2`) # gsub("\\.","-", colnames(tukey.diffs1))


  if (toupper(additional.report) == "ALL") {
    return(list('AOV.output' = aov.all,
                'AOV.Results' = aov.results,
                "Category1_Sig.Genes" = category1.sig,
                "Category2_Sig.Genes" = category2.sig,
                "Interaction_Sig.Genes" = interaction.sig,
                "All.Sig.Genes" = any.sig,
                'NonSig.Genes' = nonsig.genes,
                'Tukey.output' = tukey.all,
                'Category1_Tukey.pVals' = tukey.pvals1,
                'Category2_Tukey.pVals' = tukey.pvals2,
                'Interaction_Tukey.pVals' = tukey.pvals3,
                'Category1_Tukey.diffs' = tukey.diffs1,
                'Category2_Tukey.diffs' = tukey.diffs2,
                'Interaction_Tukey.diffs' = tukey.diffs3
    ))
  }

  if (toupper(additional.report) == "AOV") {
    return(list('AOV.output' = aov.all,
                'AOV.Results' = aov.results,
                "Category1_Sig.Genes" = category1.sig,
                "Category2_Sig.Genes" = category2.sig,
                "Interaction_Sig.Genes" = interaction.sig,
                "All.Sig.Genes" = any.sig,
                'NonSig.Genes' = nonsig.genes,
                'Category1_Tukey.pVals' = tukey.pvals1,
                'Category2_Tukey.pVals' = tukey.pvals2,
                'Interaction_Tukey.pVals' = tukey.pvals3,
                'Category1_Tukey.diffs' = tukey.diffs1,
                'Category2_Tukey.diffs' = tukey.diffs2,
                'Interaction_Tukey.diffs' = tukey.diffs3
    ))
  }

  if (toupper(additional.report) == "TUKEY") {
    return(list('AOV.Results' = aov.results,
                "Category1_Sig.Genes" = category1.sig,
                "Category2_Sig.Genes" = category2.sig,
                "Interaction_Sig.Genes" = interaction.sig,
                "All.Sig.Genes" = any.sig,
                'NonSig.Genes' = nonsig.genes,
                'Category1_Tukey.pVals' = tukey.pvals1,
                'Category2_Tukey.pVals' = tukey.pvals2,
                'Interaction_Tukey.pVals' = tukey.pvals3,
                'Category1_Tukey.diffs' = tukey.diffs1,
                'Category2_Tukey.diffs' = tukey.diffs2,
                'Interaction_Tukey.diffs' = tukey.diffs3
    ))
  }

  if (toupper(additional.report) == "NONE") {
    return(list('AOV.Results' = aov.results,
                "Category1_Sig.Genes" = category1.sig,
                "Category2_Sig.Genes" = category2.sig,
                "Interaction_Sig.Genes" = interaction.sig,
                "All.Sig.Genes" = any.sig,
                'NonSig.Genes' = nonsig.genes,
                'Category1_Tukey.pVals' = tukey.pvals1,
                'Category2_Tukey.pVals' = tukey.pvals2,
                'Interaction_Tukey.pVals' = tukey.pvals3,
                'Category1_Tukey.diffs' = tukey.diffs1,
                'Category2_Tukey.diffs' = tukey.diffs2,
                'Interaction_Tukey.diffs' = tukey.diffs3
    ))
  }
}


